<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[docker数据卷操作]]></title>
    <url>%2F2018%2F06%2F16%2Fdocker%E6%95%B0%E6%8D%AE%E5%8D%B7%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[数据卷操作选择 -v 还是 -–mount 参数Docker 新用户应该选择 –mount 参数，经验丰富的 Docker 使用者对 -v 或者 –volume 已经很熟悉了，但是推荐使用 –mount 参数。 创建一个数据卷1$ docker volume create my-vol 查看所有数据卷123mk:~ mk$ docker volume lsDRIVER VOLUME NAMElocal nexus-data 查看数据卷详细信息123456789101112mk:~ mk$ docker volume inspect nexus-data[ &#123; &quot;CreatedAt&quot;: &quot;2018-05-09T05:47:13Z&quot;, &quot;Driver&quot;: &quot;local&quot;, &quot;Labels&quot;: &#123;&#125;, &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/nexus-data/_data&quot;, &quot;Name&quot;: &quot;nexus-data&quot;, &quot;Options&quot;: &#123;&#125;, &quot;Scope&quot;: &quot;local&quot; &#125;] 启动一个挂载数据卷的容器在用 docker run 命令的时候，使用 –mount 标记来将 数据卷 挂载到容器里。在一次 docker run 中可以挂载多个 数据卷。 下面创建一个名为 web 的容器，并加载一个 数据卷 到容器的 /webapp 目录。 123456$ docker run -d -P \ --name web \ # -v my-vol:/wepapp \ --mount source=my-vol,target=/webapp \ training/webapp \ python app.py 查看数据卷的具体信息在主机里使用以下命令可以查看 web 容器的信息 1$ docker inspect web 数据卷 信息在 “Mounts” Key 下面 123456789101112&quot;Mounts&quot;: [ &#123; &quot;Type&quot;: &quot;volume&quot;, &quot;Name&quot;: &quot;my-vol&quot;, &quot;Source&quot;: &quot;/var/lib/docker/volumes/my-vol/_data&quot;, &quot;Destination&quot;: &quot;/app&quot;, &quot;Driver&quot;: &quot;local&quot;, &quot;Mode&quot;: &quot;&quot;, &quot;RW&quot;: true, &quot;Propagation&quot;: &quot;&quot; &#125;], 删除数据卷1docker volume rm my-vol 数据卷 是被设计用来持久化数据的，它的生命周期独立于容器，Docker 不会在容器被删除后自动删除数据卷，并且也不存在垃圾回收这样的机制来处理没有任何容器引用的 数据卷。如果需要在删除容器的同时移除数据卷。可以在删除容器的时候使用 docker rm -v 这个命令。 无主的数据卷可能会占据很多空间，要清理请使用以下命令 1$ docker volume prune]]></content>
      <categories>
        <category>服务器</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MongoDB备份数据]]></title>
    <url>%2F2018%2F06%2F16%2F%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[mongoDB 备份数据mongodump 是 MongoDB 提供的一个工具，用于备份数据库，配合使用 mongorestore 恢复工具使用。这套工具适合小型应用或开发环境。 运行 mongodump 和 mongorestore 时需要读取正在运行的数据库实例，因此会影响数据库性能。一方面是运行时需要占用系统资源，另一方面，运行这两个命令时数据库会强制通过内存读取所有数据，可能导致读取的不常用数据覆盖常用数据，从而影响数据库日常运行的性能。2.2及以上版本的 mongodump 数据格式与低版本不兼容，因此请勿使用高版本工具备份低版本数据。mongodump 不会备份 local 数据库。 直接运行 mongodump 命令，默认备份本地运行在27017端口下的 MongoDB 实例中的所有数据库（local 除外），并在当前目录下生成 dump/ 路径存放备份文件。你也可以使用以下命令指定备份的数据库位置、端口、输出文件位置、备份数据库和文档： 语法如下1&gt; mongodump -h dbhost -d dbname -o dbdirectory -u user -p password -h MongDB所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017 -d 需要备份的数据库实例，例如：test -o 备份的数据存放位置，例如：c:datadump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。 -u -p 如果有设置用户和密码，需要设置对应的用户名和密码，否则没有权限 一、编写脚本123456789101112131415161718192021222324252627#!/bin/sh# dump 命令执行路径，根据mongodb安装路径而定DUMP=/usr/bin/mongodump# 临时备份路径OUT_DIR=/home/backup/mongod_bak/mongod_bak_now# 压缩后的备份存放路径TAR_DIR=/home/backup/mongod_bak/mongod_bak_list# 当前系统时间DATE=`date +%Y-%m-%d`# 数据库账号DB_USER=user# 数据库密码DB_PASS=password# 代表删除7天前的备份，即只保留近 7 天的备份DAYS=7# 最终保存的数据库备份文件TAR_BAK=&quot;mongod_bak_$DATE.tar.gz&quot;cd $OUT_DIRrm -rf $OUT_DIR/*mkdir -p $OUT_DIR/$DATE$DUMP -h 127.0.0.1:27017 -u $DB_USER -p $DB_PASS -d dbname -o $OUT_DIR/$DATE# 压缩格式为 .tar.gz 格式tar -zcvf $TAR_DIR/$TAR_BAK $OUT_DIR/$DATE# 删除 15 天前的备份文件find $TAR_DIR/ -mtime +$DAYS -deleteexit 二、创建对应的目录12mkdir /home/backup/mongod_bak/mongod_bak_nowmkdir /home/backup/mongod_bak/mongod_bak_list 三、设置只执行1chmod +x mongod_bak.sh 四、利用系统工具定期执行命令1vim /etc/crontab 如果没有这个文件 我的是docker容器 1apt-get install cron 在底部添加 10 2 * * * root ~/crontab/mongod_bak.sh 基本格式 :command分 时 日 月 周 命令 第1列表示分钟1～59 每分钟用或者 /1表示第2列表示小时1～23（0表示0点）第3列表示日期1～31第4列表示月份1～12第5列标识号星期0～6（0表示星期天） 示例： 123456# m h dom mon dow user command17 * * * * root cd / &amp;&amp; run-parts --report /etc/cron.hourly25 6 * * * root test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.daily )47 6 * * 7 root test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.weekly )52 6 1 * * root test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.monthly )* 18 * * * root cd /data/mongodb_time_bak/ &amp;&amp; ./mongodb_bak.sh 五、开启定时服务1service crond start]]></content>
      <categories>
        <category>服务器</category>
        <category>数据库</category>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux定时任务（crontab）]]></title>
    <url>%2F2018%2F06%2F16%2FLinux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%EF%BC%88crontab%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1、什么是例行性工作调度 每个人或多或少都有一些约会或者是工作，有的工作是例行性的， 例如每年一次的加薪、每 个月一次的工作报告、每周一次的午餐会报、每天需要的打卡等等； 有的工作则是临时发生 的，例如刚好总公司有高官来访，需要你准备演讲器材等等！ 用在生活上面，例如每年的爱 人的生日、每天的起床时间等等、还有突发性的 3C 用品大降价 （啊！真希望天天都有！） 等等啰。像上面这些例行性工作，通常你得要记录在行事历上面才能避免忘记！不过，由于我们常常 在计算机前面的缘故， 如果计算机系统能够主动的通知我们的话，那么不就轻松多了！嘿 嘿！这个时候 Linux 的例行性工作调度就可以派上场了！ 在不考虑硬件与我们服务器的链接 状态下，我们的 Linux 可以帮你提醒很多任务，例如：每一天早上 8:00 钟要服务器连接上音 响，并启动音乐来唤你起床；而中午 12:00 希望 Linux 可以发一封信到你的邮件信箱，提醒 你可以去吃午餐了； 另外，在每年的你爱人生日的前一天，先发封信提醒你，以免忘记这么 重要的一天。那么 Linux 的例行性工作是如何进行调度的呢？所谓的调度就是将这些工作安排执行的流程 之意！ 咱们的 Linux 调度就是通过 crontab 与 at 这两个东西！这两个玩意儿有啥异同？就让 我们来瞧瞧先！ 2、crond 服务读取配置文件的位置 一般来说，crond 默认有三个地方会有执行脚本配置文件，他们分别是： /etc/crontab /etc/cron.d/* /var/spool/cron/* 这三个地方中，跟系统的运行比较有关系的两个配置文件是放在 /etc/crontab 文件内以及 /etc/cron.d/* 目录内的文件， 另外一个是跟用户自己的工作比较有关的配置文件，就是放在 /var/spool/cron/ 里面的文件群。 3、crontab 简介crontab ：crontab 这个指令所设置的工作将会循环的一直进行下去！可循环的时间为分钟、小时、每周、每月或每年等。crontab 除了可以使用指令执行外，亦可编辑 /etc/crontab 来支持。 至于让 crontab 可以生效的服务则是 crond 这个服务喔！ crond是linux下用来周期性的执行某种任务或等待处理某些事件的一个守护进程，与windows下的计划任务类似，当安装完成操作系统后，默认会安装此服务工具，并且会自动启动crond进程，crond进程每分钟会定期检查是否有要执行的任务，如果有要执行的任务，则自动执行该任务。 Linux下的任务调度分为两类，系统任务调度和用户任务调度。系统任务调度：系统周期性所要执行的工作，比如写缓存数据到硬盘、日志清理等。在/etc目录下有一个crontab文件，这个就是系统任务调度的配置文件。/etc/crontab文件包括下面几行(里面的内容下面讲解)： 1234567891011121314# /etc/crontab: system-wide crontab# Unlike any other crontab you don&apos;t have to run the `crontab&apos;# command to install the new version when you edit this file# and files in /etc/cron.d. These files also have username fields,# that none of the other crontabs do.SHELL=/bin/shPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin# m h dom mon dow user command17 * * * * root cd / &amp;&amp; run-parts --report /etc/cron.hourly25 6 * * * root test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.daily )47 6 * * 7 root test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.weekly )52 6 1 * * root test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.monthly ) 用户任务调度：用户定期要执行的工作，比如用户数据备份、定时邮件提醒等。用户可以使用 crontab 工具来定制自己的计划任务。所有用户定义的crontab 文件都被保存在 /var/spool/cron目录中。其文件名与用户名一致。 上面时间格式解释 cron控制 安装crontab：yum install crontabs服务操作说明：/sbin/service crond start //启动服务/sbin/service crond stop //关闭服务/sbin/service crond restart //重启服务/sbin/service crond reload //重新载入配置查看crontab服务状态：service crond status手动启动crontab服务：service crond start]]></content>
      <categories>
        <category>服务器</category>
        <category>linux指令</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[du命令查看磁盘文件夹大小]]></title>
    <url>%2F2018%2F06%2F16%2Fdu%E5%91%BD%E4%BB%A4%E6%9F%A5%E7%9C%8B%E7%A3%81%E7%9B%98%E6%96%87%E4%BB%B6%E5%A4%B9%E5%A4%A7%E5%B0%8F%2F</url>
    <content type="text"><![CDATA[df du命令查看磁盘文件夹大小 df命令是linux系统以磁盘分区为单位查看文件系统，可以加上参数查看磁盘剩余空间信息，命令格式命令 ： df -hl 12345678910文件系统 容量 已用 可用 已用% 挂载点/dev/root 7.2G 5.1G 1.8G 74% /devtmpfs 458M 0 458M 0% /devtmpfs 462M 0 462M 0% /dev/shmtmpfs 462M 6.9M 455M 2% /runtmpfs 5.0M 4.0K 5.0M 1% /run/locktmpfs 462M 0 462M 0% /sys/fs/cgroup/dev/mmcblk0p1 42M 21M 21M 51% /boottmpfs 93M 0 93M 0% /run/user/1000/dev/sdb3 917G 38G 833G 5% /media/pi/pi-data 常用的命令df -hl 查看磁盘剩余空间df -h 查看每个根路径的分区大小df –help 帮助 du -sh [目录名] 返回该目录的大小du -sm [文件夹] 返回该文件夹总M数du –help 帮助 du help 翻译123456789101112131415161718192021222324252627282930313233343536373839404142434445用法：du [选项]... [文件]...或：du [选项]... --files0-from=F，计算每个文件的磁盘用量，目录则取总用量。 长选项必须使用的参数对于短选项时也是必需使用的。 -a, --all 输出所有文件的磁盘用量，不仅仅是目录 --apparent-size 显示表面用量，而并非是磁盘用量；虽然表面用量通常会 小一些，但有时它会因为稀疏文件间的&quot;洞&quot;、内部碎片、非直接引用的块等原因而变大。 -B, --block-size=大小 使用指定字节数的块 -b, --bytes 等于--apparent-size --block-size=1 -c, --total 显示总计信息 -D, --dereference-args 解除命令行中列出的符号连接 --files0-from=F 计算文件F 中以NUL 结尾的文件名对应占用的磁盘空间 如果F 的值是&quot;-&quot;，则从标准输入读入文件名 -H 等于--dereference-args (-D) -h, --human-readable 以可读性较好的方式显示尺寸(例如：1K 234M 2G) --si 类似-h，但在计算时使用1000 为基底而非1024 -k 等于--block-size=1K -l, --count-links 如果是硬连接，就多次计算其尺寸 -m 等于--block-size=1M -L, --dereference 找出任何符号链接指示的真正目的地 -P, --no-dereference 不跟随任何符号链接(默认) -0, --null 将每个空行视作0 字节而非换行符 -S, --separate-dirs 不包括子目录的占用量 -s, --summarize 只分别计算命令列中每个参数所占的总用量 -x, --one-file-system 跳过处于不同文件系统之上的目录 -X, --exclude-from=文件 排除与指定文件中描述的模式相符的文件 --exclude=PATTERN 排除与PATTERN 中描述的模式相符的文件 --max-depth=N 显示目录总计(与--all 一起使用计算文件) 当N 为指定数值时计算深度为N； --max-depth=0 等于--summarize --time 显示目录或该目录子目录下所有文件的最后修改时间 --time=WORD 显示WORD 时间，而非修改时间： atime，access，use，ctime 或status --time-style=样式 按照指定样式显示时间(样式解释规则同&quot;date&quot;命令)： full-iso，long-iso，iso，+FORMAT --help 显示此帮助信息并退出 --version 显示版本信息并退出 [大小]可以是以下的单位(单位前可加上整数)： kB 1000，K 1024，MB 1000000，M 1048576，还有 G、T、P、E、Z、Y。请向报告du 的错误 GNU coreutils 项目主页：&lt;http://www.gnu.org/software/coreutils/&gt; GNU 软件一般性帮助：&lt;http://www.gnu.org/gethelp/&gt; 请向&lt;http://translationproject.org/team/zh_CN.html&gt; 报告du 的翻译错误 示例：du –max-depth=1 -h1234root@raspberrypi:/home# du --max-depth=1 -h47M ./git241M ./pi288M .]]></content>
      <categories>
        <category>服务器</category>
        <category>linux指令</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[frp开机自启]]></title>
    <url>%2F2018%2F04%2F15%2Ffrp%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%2F</url>
    <content type="text"><![CDATA[vi /etc/systemd/system/frps.service 服务端1234567891011[Unit]Description=frps daemonAfter=syslog.target network.targetWants=network.target[Service]Type=simpleExecStart=/root/frp_0.13.0_linux_amd64/frps -c /root/frp_0.13.0_linux_amd64/frps_my.iniRestart= alwaysRestartSec=1min[Install]WantedBy=multi-user.target client端1234567891011[Unit]Description=frpc daemonAfter=syslog.target network.targetWants=network.target[Service]Type=simpleExecStart=/root/frp_0.13.0_linux_amd64/frpc -c /root/frp_0.13.0_linux_amd64/frpc_my.iniRestart= alwaysRestartSec=1min[Install]WantedBy=multi-user.target systemctl start frpc //启动systemctl status frpc //状态查询systemctl enable frpc //开机启动]]></content>
      <categories>
        <category>网络</category>
        <category>内网穿透</category>
      </categories>
      <tags>
        <tag>内网穿透</tag>
        <tag>linux</tag>
        <tag>frp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu16.04下编译openJDK7]]></title>
    <url>%2F2018%2F04%2F15%2FUbuntu16-04%E4%B8%8B%E7%BC%96%E8%AF%91openJDK7%2F</url>
    <content type="text"><![CDATA[本来是看 《深入理解Java虚拟机》第二版的，里面的第一章就是编译openJDK7，所以兴致勃勃的在我的mac系统上编译，不过有好多问题😂，所有装了个虚拟机使用了Ubuntu编译了openJDk7 ，原因是资料多。下面就开始一一列出经过和遇到的坑及解决办法吧！ 首先，当然是下载openJdk7源码了使用 Mercurial,因为openJdk7 是使用这个版本控制管理的 1sudo apt-get install mercurial 接下来就是下载源码了 1234hg clone http://hg.openjdk.java.net/jdk7u/jdk7u-devcd jdk7u-devchmod 755 get_source.sh./get_source.sh 给你建议，如果有云服务器，建议在上面下载完，在导入本地，我的本地网络下载不了，原因大家都懂😭 编译的过程大部分是摘抄 1sudo apt-get install build-essential gawk m4 libasound2-dev libcups2-dev libxrender-dev xorg-dev xutils-dev x11proto-print-dev binutils libmotif3 libmotif-dev ant jdk-6u45-linux-x64.bin,资源自己搜，安装在本机。 libmotif3也不能直接安装，下载地址 环境变量设置 enviroment.sh ,make sanity检查使用方法：将这个文件，放到你下载好的源码根目录下，有make文件的那个文件夹，我在这转了好几圈，1、编译前要用 source environment.sh 是这个文件生效2、使用 make sanity如果输出是Sanity check passed，则证明检查通过，可以进行make了 123456789101112131415161718192021222324252627#!/bin/sh# environment.shexport LANG=Cexport ALT_BOOTDIR=/usr/lib/java/jdk1.6.0_45export ALLOW_DOWNLOADS=trueexport HOTSPOT_BUILD_JOBS=4export ALT_PARALLEL_COMPILE_JOBS=4export SKIP_COMPARE_IMAGES=trueexport USE_PRECOMPILED_HEADER=trueexport BUILD_LANGTOOLS=true#export BUILD_JAXP=false#export BUILD_JAXWS=false#export BUILD_CORBA=falseexport BUILD_HOTSPORT=trueexport BUILD_JDK=true# export SKIP_DEBUG_BUILD=false# export SKIP_FASTDEBUG_BUILD=true# export DEBUG_NAME=debugBUILD_DEPLOY=falseBUILD_INSTALL=falseexport ALT_OUTPUTDIR=/home/mk/jdk7buildunset JAVA_HOMEunset CLASSPATHunset LD_LIBRARY_PATH 编译了 输入make 2&gt;&amp;1 | tee $ALT_OUTPUTDIR/build.log进行编译 若出现以下信息，则证明编译成功 123456789101112131415161718############################################################################# Leaving jdk for target(s) sanity all docs images ################################################################################## Build time 00:04:29 jdk for target(s) sanity all docs images #############################################################################-- Build times ----------Target all_product_buildStart 2018-04-15 11:23:03End 2018-04-15 11:27:4300:00:03 corba00:00:03 hotspot00:00:02 jaxp00:00:02 jaxws00:04:29 jdk00:00:01 langtools00:04:40 TOTAL------------------------- 错误解决办法问题一123456789101112131415161718192021222324/usr/include/x86_64-linux-gnu/sys/cdefs.h:42:0: note: this is the location of the previous definition # define __LEAF , __leaf__ ^cc1plus: all warnings being treated as errors/home/mk/jdk7up/jdk7/hotspot/make/linux/makefiles/vm.make:260: recipe for target &apos;precompiled.hpp.gch&apos; failedmake[6]: *** [precompiled.hpp.gch] Error 1make[6]: Leaving directory &apos;/home/mk/jdk7build/hotspot/outputdir/linux_amd64_compiler2/product&apos;/home/mk/jdk7up/jdk7/hotspot/make/linux/makefiles/top.make:117: recipe for target &apos;the_vm&apos; failedmake[5]: *** [the_vm] Error 2make[5]: Leaving directory &apos;/home/mk/jdk7build/hotspot/outputdir/linux_amd64_compiler2/product&apos;/home/mk/jdk7up/jdk7/hotspot/make/linux/Makefile:289: recipe for target &apos;product&apos; failedmake[4]: *** [product] Error 2make[4]: Leaving directory &apos;/home/mk/jdk7build/hotspot/outputdir&apos;Makefile:180: recipe for target &apos;generic_build2&apos; failedmake[3]: *** [generic_build2] Error 2make[3]: Leaving directory &apos;/home/mk/jdk7up/jdk7/hotspot/make&apos;Makefile:138: recipe for target &apos;product&apos; failedmake[2]: *** [product] Error 2make[2]: Leaving directory &apos;/home/mk/jdk7up/jdk7/hotspot/make&apos;make/hotspot-rules.gmk:97: recipe for target &apos;hotspot-build&apos; failedmake[1]: *** [hotspot-build] Error 2make[1]: Leaving directory &apos;/home/mk/jdk7up/jdk7&apos;Makefile:244: recipe for target &apos;build_product_image&apos; failedmake: *** [build_product_image] Error 2 解决办法： 123456789在interfaceSupport.hpp增加#ifdef __LEAF#undef __LEAF#define __LEAF(result_type, header) \ TRACE_CALL(result_type, header) \ debug_only(NoHandleMark __hm;) \ /* begin of body */#endif 问题二12345678910111213141516171819/usr/lib/java/jdk1.6.0_45/bin/idlj -J-XX:-PrintVMOptions -J-XX:+UnlockDiagnosticVMOptions -J-XX:-LogVMOutput -J-Xmx512m -J-Xms512m -J-XX:PermSize=32m -J-XX:MaxPermSize=160m -td &quot;/home/mk/jdk7build/corba/gensrc&quot; -i &quot;../../../../src/share/classes/org/omg/PortableServer&quot; -i &quot;../../../../src/share/classes/org/omg/PortableInterceptor&quot; -corba 3.0 -fall -pkgPrefix PortableServer org.omg ../../../../src/share/classes/org/omg/PortableServer/poa.idlError occurred during initialization of VMCould not reserve enough space for object heapMakefile:96: recipe for target &apos;/home/mk/jdk7build/corba/gensrc/org/omg/PortableServer/CurrentHelper.java&apos; failedmake[5]: *** [/home/mk/jdk7build/corba/gensrc/org/omg/PortableServer/CurrentHelper.java] Error 1make[5]: Leaving directory &apos;/home/mk/jdk7up/jdk7/corba/make/org/omg/sources&apos;Makefile:42: recipe for target &apos;build&apos; failedmake[4]: *** [build] Error 1make[4]: Leaving directory &apos;/home/mk/jdk7up/jdk7/corba/make/org/omg&apos;Makefile:41: recipe for target &apos;build&apos; failedmake[3]: *** [build] Error 1make[3]: Leaving directory &apos;/home/mk/jdk7up/jdk7/corba/make/org&apos;Makefile:166: recipe for target &apos;build&apos; failedmake[2]: *** [build] Error 1make[2]: Leaving directory &apos;/home/mk/jdk7up/jdk7/corba/make&apos;make/corba-rules.gmk:42: recipe for target &apos;corba-build&apos; failedmake[1]: *** [corba-build] Error 2make[1]: Leaving directory &apos;/home/mk/jdk7up/jdk7&apos;Makefile:244: recipe for target &apos;build_product_image&apos; failed 解决办法： 文件中有空格 问题三123456(cd ./langtools/make &amp;&amp; \ make JDK_TOPDIR=/home/mk/jdk7up/jdk7/jdk JDK_MAKE_SHARED_DIR=/home/mk/jdk7up/jdk7/jdk/make/common/shared EXTERNALSANITYCONTROL=true SOURCE_LANGUAGE_VERSION=7 TARGET_CLASS_VERSION=7 MILESTONE=internal BUILD_NUMBER=b00 JDK_BUILD_NUMBER=b00 FULL_VERSION=1.7.0-internal-mk_2018_04_13_16_15-b00 PREVIOUS_JDK_VERSION=1.6.0 JDK_VERSION=1.7.0 JDK_MKTG_VERSION=7 JDK_MAJOR_VERSION=1 JDK_MINOR_VERSION=7 JDK_MICRO_VERSION=0 PREVIOUS_MAJOR_VERSION=1 PREVIOUS_MINOR_VERSION=6 PREVIOUS_MICRO_VERSION=0 ARCH_DATA_MODEL=64 COOKED_BUILD_NUMBER=0 ALT_OUTPUTDIR=/home/mk/jdk7up/jdk7/build/linux-amd64/langtools ALT_BOOTDIR=/NO_BOOTDIR all)make[2]: Entering directory &apos;/home/mk/jdk7up/jdk7/langtools/make&apos;JAVA_HOME=/NO_BOOTDIR ANT_OPTS=-Djava.io.tmpdir=&apos;/home/mk/jdk7up/jdk7/build/linux-amd64/langtools/build/ant-tmp&apos; ant -Djdk.version=1.7.0 -Dfull.version=&apos;1.7.0-internal-mk_2018_04_13_16_15-b00&apos; -Dmilestone=internal -Dbuild.number=b00 -Djavac.target=7 -Djavac.source=7 -Dboot.java.home=/NO_BOOTDIR -Dimport.jdk=/home/mk/jdk7up/jdk7/jdk -Dbuild.dir=/home/mk/jdk7up/jdk7/build/linux-amd64/langtools/build -Ddist.dir=/home/mk/jdk7up/jdk7/build/linux-amd64/langtools/dist buildError: JAVA_HOME is not defined correctly. We cannot execute /NO_BOOTDIR/bin/java 解决办法： 环境变量没有设置，也就是，environment.sh 没有执行 source environment.sh 问题四12g++ -DLINUX -D_GNU_SOURCE -DAMD64 -DPRODUCT -I. -I/home/mk/jdk7up/jdk7/hotspot/src/share/vm/prims -I/home/mk/jdk7up/jdk7/hotspot/src/share/vm -I/home/mk/jdk7up/jdk7/hotspot/src/cpu/x86/vm -I/home/mk/jdk7up/jdk7/hotspot/src/os_cpu/linux_x86/vm -I/home/mk/jdk7up/jdk7/hotspot/src/os/linux/vm -I/home/mk/jdk7up/jdk7/hotspot/src/os/posix/vm -I../generated -DHOTSPOT_RELEASE_VERSION=&quot;\&quot;21.0-b17\&quot;&quot; -DHOTSPOT_BUILD_TARGET=&quot;\&quot;product\&quot;&quot; -DHOTSPOT_BUILD_USER=&quot;\&quot;mk\&quot;&quot; -DHOTSPOT_LIB_ARCH=\&quot;amd64\&quot; -DJRE_RELEASE_VERSION=&quot;\&quot;1.7.0-internal-mk_2018_04_13_16_21-b00\&quot;&quot; -DHOTSPOT_VM_DISTRO=&quot;\&quot;OpenJDK\&quot;&quot; -DTARGET_OS_FAMILY_linux -DTARGET_ARCH_x86 -DTARGET_ARCH_MODEL_x86_64 -DTARGET_OS_ARCH_linux_x86 -DTARGET_OS_ARCH_MODEL_linux_x86_64 -DTARGET_COMPILER_gcc -DCOMPILER2 -DCOMPILER1 -fPIC -fno-rtti -fno-exceptions -D_REENTRANT -fcheck-new -fvisibility=hidden -m64 -pipe -O3 -fno-strict-aliasing -DVM_LITTLE_ENDIAN -D_LP64=1 -fno-omit-frame-pointer -Werror -Wpointer-arith -Wsign-compare -c -MMD -MP -MF ../generated/dependencies/dump_x86_64.o.d -o dump_x86_64.o /home/mk/jdk7up/jdk7/hotspot/src/cpu/x86/vm/dump_x86_64.cppcc1plus: all warnings being treated as errors 解决办法： 12在hotspot/make/makefiles/gcc.make 中，把 -Werror 选项去掉。/home/mk/jdk7up/jdk7/hotspot/make/linux/makefiles/gcc.make 问题五123-ljvm -lcgcc: error: unrecognized command line option &apos;-mimpure-text&apos;../../common/Library.gmk:221: recipe for target &apos;/home/mk/jdk7build/lib/amd64/libverify.so&apos; failed 解决办法： 1234/home/mk/jdk7up/jdk7/jdk/make/common/shared/Compiler-gcc.gmk 在文件里的第70行 #SHARED_LIBRARY_FLAG = -shared -mimpure-text 改为 SHARED_LIBRARY_FLAG = -shared 问题六12345Error: time is more than 10 years from present: 1136059200000java.lang.RuntimeException: time is more than 10 years from present: 1136059200000 at build.tools.generatecurrencydata.GenerateCurrencyData.makeSpecialCaseEntry(GenerateCurrencyData.java:285) at build.tools.generatecurrencydata.GenerateCurrencyData.buildMainAndSpecialCaseTables(GenerateCurrencyData.java:225) at build.tools.generatecurrencydata.GenerateCurrencyData.main(GenerateCurrencyData.java:154) 解决办法 1234567891011# 修改CurrencyData.properties（路径：jdk/src/share/classes/java/util/CurrencyData.properties）修改108行AZ=AZM;2009-12-31-20-00-00;AZN修改381行MZ=MZM;2009-06-30-22-00-00;MZN修改443行RO=ROL;2009-06-30-21-00-00;RON修改535行TR=TRL;2009-12-31-22-00-00;TRY修改561行VE=VEB;2009-01-01-04-00-00;VEF 问题七1make[5]: *** [/home/lichengwu/openjdk7/build/linux-amd64/lib/amd64/libjsoundalsa.so] Error 1 解决办法： 12ln -s build/linux-amd64/lib/amd64/libjsound.so build/linux-amd64/lib/amd64/libjsoundalsa.soln 命令解决不了，使用 cp命令]]></content>
      <categories>
        <category>编程语言</category>
        <category>java编译</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>openJDK</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[路由器DMZ原理]]></title>
    <url>%2F2018%2F04%2F12%2F%E8%B7%AF%E7%94%B1%E5%99%A8DMZ%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[搞了一个树莓派，想直接外网可以访问所以就遇到这个东东 来个概念简介吧 维基百科 123DMZ，全写Demilitarized Zone，译名为“非军事区”[1]，又名Perimeter network，即“边界网络”、周边网络[2]或“对外网络”，为一种网络架构的布置方案，常用的架设方案是在不信任的外部网络和可信任的内部网络外，创建一个面向外部网络的物理或逻辑子网，该子网能设置用于对外部网络的服务器主机。该方案可以使用在防火墙、路由器等区隔内外网的网络设备。在一般比较低级的网络设备，DMZ的功能只能以软件设置的接口去设置并实现，实体的网络层相接，会与一般的LAN PORT相接共同管理。不过在一般比较高阶的网络设备，如高阶的防火墙设备，DMZ的功能除了软件的接口的设置外，在实体的连接PORT除了一般的WAN PORT、LAN PORT外，还会有另外独立的DMZ PORT，这样可以方便网络管理人员在管理网段时，除了软件接口上去设置WAN、LAN、DMZ等网段外，在实体的缆线连接（通常采用的是RJ45）时，也可以直接区分网段，更方便管理。 一般网络分成内网和外网，也就是LAN和WAN,那么，当你有1台物理位置上的1台服务器，需要被外网访问，并且，也被内网访问的时候，那么，有2种方法，一种是放在LAN中，一种是放在DMZ。因为防火墙默认情况下，是为了保护内网的，所以，一般的策略是禁止外网访问内网，许可内网访问外网。但如果这个服务器能被外网所访问，那么，就意味着这个服务器已经处于不可信任的状态，那么，这个服务器就不能（主动）访问内网。所以，如果服务器放在内网（通过端口重定向让外网访问），一旦这个服务器被攻击，则内网将会处于非常不安全的状态。但DMZ就是为了让外网能访问内部的资源，（内部资源在这里指的就是这个服务器），而内网呢，也能访问这个服务器，但这个服务器是不能主动访问内网的。DMZ就是这样的一个区域。为了让物理位置在内网的，并且，希望能被外网所访问的这样的一个区域。 一个典型的DMZ区的应用图，用户将Web、Mail、FTP等需要为内部和外部网络提供服务的服务器放置到防火墙的DMZ区内。通过合理的策略规划，使DMZ中服务器既免受到来自外网络的入侵和破坏，也不会对内网中的机密信息造成影响。DMZ服务区好比一道屏障，在其中放置外网服务器，在为外网用户提供服务的同时也有效地保障了内部网络的安全。 DMZ应用在一个用路由器连接的局域网中,我们可以将网络划分为三个区域：安全级别最高的LAN Area（内网）,安全级别中等的DMZ区域和安全级别最低的Internet区域（外网）。三个区域因担负不同的任务而拥有不同的访问策略。我们在配置一个拥有DMZ区的网络的时候通常定义以下的访问控制策略以实现DMZ区的屏障功能。1、内网可以访问外网内网的用户需要自由地访问外网。在这一策略中，防火墙需要执行NAT。 2、内网可以访问DMZ此策略使内网用户可以使用或者管理DMZ中的服务器。 3、外网不能访问内网这是防火墙的基本策略了，内网中存放的是公司内部数据，显然这些数据是不允许外网的用户进行访问的。如果要访问，就要通过VPN方式来进行。 4、外网可以访问DMZDMZ中的服务器需要为外界提供服务，所以外网必须可以访问DMZ。同时，外网访问DMZ需要由防火墙完成对外地址到服务器实际地址的转换。 5、DMZ不能访问内网如不执行此策略，则当入侵者攻陷DMZ时，内部网络将不会受保护。 6、DMZ不能访问外网此条策略也有例外，比如我们的例子中，在DMZ中放置邮件服务器时，就需要访问外网，否则将不能正常工作。 在没有DMZ的技术之前，需要使用外网服务器的用户必须在其防火墙上面开放端口（就是Port Forwarding技术）使互联网的用户访问其外网服务器，显然，这种做法会因为防火墙对互联网开放了一些必要的端口降低了需要受严密保护的内网区域的安全性，黑客们只需要攻陷外网服务器，那么整个内部网络就完全崩溃了。DMZ区的诞生恰恰为需用架设外网服务器的用户解决了内部网络的安全性问题。 原贴地址]]></content>
      <categories>
        <category>服务器</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>DMZ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[gogs后台运行及重启]]></title>
    <url>%2F2018%2F04%2F12%2Fgogs%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E5%8F%8A%E9%87%8D%E5%90%AF%2F</url>
    <content type="text"><![CDATA[gogs 运行在后台后出现问题不会关😭 1$ nohup ./gogs web &amp; 后台运行后可以使用 123$ lsof -i:3000COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAMEgogs 17483 git 6u IPv6 338433 0t0 TCP *:3000 (LISTEN) 然后就可以使用杀掉进程了，最后就是你放心的启动gogs吧😁 1$ kill -9 17483]]></content>
      <categories>
        <category>服务器</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>Gogs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[私有云Owncloud搭建]]></title>
    <url>%2F2018%2F04%2F06%2F%E7%A7%81%E6%9C%89%E4%BA%91Owncloud%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[owncloudOwnCloud是一个基于Linux系统的开源云项目，允许用户建立自己的个人云服务器，目前功能包括文件分享、音乐存储、日历、联系人和书签共享等等。OwnCloud业务人员称，“相比Dropbox和box.net，我们提供的服务更实惠，更安全，更方便管理，灵活性更强，十分适合商业用途。OwnCloud用户还可在自己的硬件和存储设备上实现文件同步和共享服务。 Owncould下载网址 本次搭建采用了 nginx+owncloud+php5 一、根据上面的网址下载 ownCould 安装包解压开压缩包，并且将解压后的文件移动到对应的文件夹 想要存放 website的目录 /data/website/owncloud 12tar -jxvf owncloud-10.0.7.tar.bz2mv owncloud /data/website/owncloud 上面目录owncloud 需要配置权限 1drwxr-x--- 14 root www-data 4096 4月 6 21:45 owncloud 官方摘的权限配置 需要修改You can find your HTTP user in your HTTP server configuration files. Or you can use PHP Version and Information (Look for the User/Group line). 1234The HTTP user and group in Debian/Ubuntu is www-data.The HTTP user and group in Fedora/CentOS is apache.The HTTP user and group in Arch Linux is http.The HTTP user in openSUSE is wwwrun, and the HTTP group is www. 可以使用 下面的命令 检查 用户是否有访问，你设置磁盘路径的权限 1sudo -u www-data ls -la /media/pi/pi-data/owncloud 二、配置nginx 代理1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859upstream php-handler &#123; server 127.0.0.1:9000; #server unix:/var/run/php5-fpm.sock;&#125;server &#123; listen 81; server_name www.test.com; # Path to the root of your installation root /data/website/owncloud; index index.html index.htm index.php; # set max upload size client_max_body_size 10G; fastcgi_buffers 64 4K; # Disable gzip to avoid the removal of the ETag header gzip off; # Uncomment if your server is build with the ngx_pagespeed module # This module is currently not supported. #pagespeed off; rewrite ^/caldav(.*)$ /remote.php/caldav$1 redirect; rewrite ^/carddav(.*)$ /remote.php/carddav$1 redirect; rewrite ^/webdav(.*)$ /remote.php/webdav$1 redirect; index index.php; error_page 403 /core/templates/403.php; error_page 404 /core/templates/404.php; location = /robots.txt &#123; allow all; log_not_found off; access_log off; &#125; location ~ ^/(?:\.htaccess|data|config|db_structure\.xml|README)&#123; deny all; &#125; location / &#123; # The following 2 rules are only needed with webfinger rewrite ^/.well-known/host-meta /public.php?service=host-meta last; rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last; rewrite ^/.well-known/carddav /remote.php/carddav/ redirect; rewrite ^/.well-known/caldav /remote.php/caldav/ redirect; rewrite ^(/core/doc/[^\/]+/)$ $1/index.html;&quot;owncould.conf&quot; 56L, 2123C 1,1 顶端 rewrite ^/.well-known/caldav /remote.php/caldav/ redirect; rewrite ^(/core/doc/[^\/]+/)$ $1/index.html; try_files $uri $uri/ /index.php; &#125; location ~ \.php(?:$|/) &#123; fastcgi_split_path_info ^(.+\.php)(/.+)$; include fastcgi_params; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param PATH_INFO $fastcgi_path_info; fastcgi_pass php-handler; &#125; # Optional: set long EXPIRES header on static assets location ~* \.(?:jpg|jpeg|gif|bmp|ico|png|css|js|swf)$ &#123; expires 30d; # Optional: Don&apos;t log access to assets access_log off; &#125;&#125; 三、剩下的就是配置PHP 环境了Required PHP Version PHP &gt;= 5.6 (ideally 7.0 or above) 搭配需要的PHP环境 推荐 7.0 1234apt-get install -y libsmbclient-dev libssh2-1-dev openssl php5-imagick \ php5-common php5-curl php5-dev php5-gd \ php5-imap php5-intl php5-json php5-ldap \ php5-mcrypt php5-mysql php5-pgsql php5-sqlite 提示：如果获取不到php 环境变量修改目录 /etc/php5/fpm/pool.d/www.conf 12345678; Pass environment variables like LD_LIBRARY_PATH. All $VARIABLEs are taken from; the current environment.; Default Value: clean envenv[HOSTNAME] = $HOSTNAMEenv[PATH] = /usr/local/bin:/usr/bin:/binenv[TMP] = /tmpenv[TMPDIR] = /tmpenv[TEMP] = /tmp 放一张正常启动的图]]></content>
      <categories>
        <category>服务器</category>
        <category>文件服务器</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>私有云</tag>
        <tag>文件服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派frp搭建内网穿透]]></title>
    <url>%2F2018%2F04%2F06%2F%E6%A0%91%E8%8E%93%E6%B4%BEfrp%E6%90%AD%E5%BB%BA%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%2F</url>
    <content type="text"><![CDATA[frpfrp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议。 目录 frp 的作用 开发状态 架构 使用示例 通过 ssh 访问公司内网机器 通过自定义域名访问部署于内网的 web 服务 转发 DNS 查询请求 转发 Unix域套接字 对外提供简单的文件访问服务 安全地暴露内网服务 点对点内网穿透 通过 frpc 所在机器访问外网 功能说明 配置文件 Dashboard 身份验证 加密与压缩 客户端热加载配置文件 客户端查看代理状态 特权模式 端口白名单 TCP 多路复用 底层通信可选 kcp 协议 连接池 修改 Host Header 获取用户真实 IP 通过密码保护你的 web 服务 自定义二级域名 URL 路由 通过代理连接 frps 范围端口映射 插件 开发计划 为 frp 做贡献 捐助 支付宝扫码捐赠 微信支付捐赠 Paypal 捐赠 frp 的作用 利用处于内网或防火墙后的机器，对外网环境提供 http 或 https 服务。 对于 http, https 服务支持基于域名的虚拟主机，支持自定义域名绑定，使多个域名可以共用一个80端口。 利用处于内网或防火墙后的机器，对外网环境提供 tcp 和 udp 服务，例如在家里通过 ssh 访问处于公司内网环境内的主机。 开发状态frp 仍然处于前期开发阶段，未经充分测试与验证，不推荐用于生产环境。 master 分支用于发布稳定版本，dev 分支用于开发，您可以尝试下载最新的 release 版本进行测试。 目前的交互协议可能随时改变，不保证向后兼容，升级新版本时需要注意公告说明同时升级服务端和客户端。 架构 使用示例根据对应的操作系统及架构，从 Release 页面下载最新版本的程序。 将 frps 及 frps.ini 放到具有公网 IP 的机器上。 将 frpc 及 frpc.ini 放到处于内网环境的机器上。 通过 ssh 访问公司内网机器 修改 frps.ini 文件，这里使用了最简化的配置： 123# frps.ini[common]bind_port = 7000 启动 frps： ./frps -c ./frps.ini 修改 frpc.ini 文件，假设 frps 所在服务器的公网 IP 为 x.x.x.x； 12345678910# frpc.ini[common]server_addr = x.x.x.xserver_port = 7000[ssh]type = tcplocal_ip = 127.0.0.1local_port = 22remote_port = 6000 启动 frpc： ./frpc -c ./frpc.ini 通过 ssh 访问内网机器，假设用户名为 test： ssh -oPort=6000 test@x.x.x.x 通过自定义域名访问部署于内网的 web 服务有时想要让其他人通过域名访问或者测试我们在本地搭建的 web 服务，但是由于本地机器没有公网 IP，无法将域名解析到本地的机器，通过 frp 就可以实现这一功能，以下示例为 http 服务，https 服务配置方法相同， vhost_http_port 替换为 vhost_https_port， type 设置为 https 即可。 修改 frps.ini 文件，设置 http 访问端口为 8080： 1234# frps.ini[common]bind_port = 7000vhost_http_port = 8080 启动 frps； ./frps -c ./frps.ini 修改 frpc.ini 文件，假设 frps 所在的服务器的 IP 为 x.x.x.x，local_port 为本地机器上 web 服务对应的端口, 绑定自定义域名 www.yourdomain.com: 123456789# frpc.ini[common]server_addr = x.x.x.xserver_port = 7000[web]type = httplocal_port = 80custom_domains = www.yourdomain.com 启动 frpc： ./frpc -c ./frpc.ini 将 www.yourdomain.com 的域名 A 记录解析到 IP x.x.x.x，如果服务器已经有对应的域名，也可以将 CNAME 记录解析到服务器原先的域名。 通过浏览器访问 http://www.yourdomain.com:8080 即可访问到处于内网机器上的 web 服务。 转发 DNS 查询请求DNS 查询请求通常使用 UDP 协议，frp 支持对内网 UDP 服务的穿透，配置方式和 TCP 基本一致。 修改 frps.ini 文件： 123# frps.ini[common]bind_port = 7000 启动 frps： ./frps -c ./frps.ini 修改 frpc.ini 文件，设置 frps 所在服务器的 IP 为 x.x.x.x，转发到 Google 的 DNS 查询服务器 8.8.8.8 的 udp 53 端口： 12345678910# frpc.ini[common]server_addr = x.x.x.xserver_port = 7000[dns]type = udplocal_ip = 8.8.8.8local_port = 53remote_port = 6000 启动 frpc： ./frpc -c ./frpc.ini 通过 dig 测试 UDP 包转发是否成功，预期会返回 www.google.com 域名的解析结果： dig @x.x.x.x -p 6000 www.google.com 转发 Unix域套接字通过 tcp 端口访问内网的 unix域套接字(例如和 docker daemon 通信)。 frps 的部署步骤同上。 启动 frpc，启用 unix_domain_socket 插件，配置如下： 12345678910# frpc.ini[common]server_addr = x.x.x.xserver_port = 7000[unix_domain_socket]type = tcpremote_port = 6000plugin = unix_domain_socketplugin_unix_path = /var/run/docker.sock 通过 curl 命令查看 docker 版本信息 curl http://x.x.x.x:6000/version 对外提供简单的文件访问服务通过 static_file 插件可以对外提供一个简单的基于 HTTP 的文件访问服务。 frps 的部署步骤同上。 启动 frpc，启用 static_file 插件，配置如下： 123456789101112131415# frpc.ini[common]server_addr = x.x.x.xserver_port = 7000[test_static_file]type = tcpremote_port = 6000plugin = static_file# 要对外暴露的文件目录plugin_local_path = /tmp/file# 访问 url 中会被去除的前缀，保留的内容即为要访问的文件路径plugin_strip_prefix = staticplugin_http_user = abcplugin_http_passwd = abc 通过浏览器访问 http://x.x.x.x:6000/static/ 来查看位于 /tmp/file 目录下的文件，会要求输入已设置好的用户名和密码。 安全地暴露内网服务对于某些服务来说如果直接暴露于公网上将会存在安全隐患。 使用 stcp(secret tcp) 类型的代理可以避免让任何人都能访问到要穿透的服务，但是访问者也需要运行另外一个 frpc。 以下示例将会创建一个只有自己能访问到的 ssh 服务代理。 frps 的部署步骤同上。 启动 frpc，转发内网的 ssh 服务，配置如下，不需要指定远程端口： 1234567891011# frpc.ini[common]server_addr = x.x.x.xserver_port = 7000[secret_ssh]type = stcp# 只有 sk 一致的用户才能访问到此服务sk = abcdefglocal_ip = 127.0.0.1local_port = 22 在要访问这个服务的机器上启动另外一个 frpc，配置如下： 123456789101112131415# frpc.ini[common]server_addr = x.x.x.xserver_port = 7000[secret_ssh_visitor]type = stcp# stcp 的访问者role = visitor# 要访问的 stcp 代理的名字server_name = secret_sshsk = abcdefg# 绑定本地端口用于访问 ssh 服务bind_addr = 127.0.0.1bind_port = 6000 通过 ssh 访问内网机器，假设用户名为 test： ssh -oPort=6000 test@127.0.0.1 点对点内网穿透frp 提供了一种新的代理类型 xtcp 用于应对在希望传输大量数据且流量不经过服务器的场景。 使用方式同 stcp 类似，需要在两边都部署上 frpc 用于建立直接的连接。 目前处于开发的初级阶段，并不能穿透所有类型的 NAT 设备，所以穿透成功率较低。穿透失败时可以尝试 stcp 的方式。 frps 除正常配置外需要额外配置一个 udp 端口用于支持该类型的客户端: 1bind_udp_port = 7001 启动 frpc，转发内网的 ssh 服务，配置如下，不需要指定远程端口: 1234567891011# frpc.ini[common]server_addr = x.x.x.xserver_port = 7000[p2p_ssh]type = xtcp# 只有 sk 一致的用户才能访问到此服务sk = abcdefglocal_ip = 127.0.0.1local_port = 22 在要访问这个服务的机器上启动另外一个 frpc，配置如下: 123456789101112131415# frpc.ini[common]server_addr = x.x.x.xserver_port = 7000[p2p_ssh_visitor]type = xtcp# xtcp 的访问者role = visitor# 要访问的 xtcp 代理的名字server_name = p2p_sshsk = abcdefg# 绑定本地端口用于访问 ssh 服务bind_addr = 127.0.0.1bind_port = 6000 通过 ssh 访问内网机器，假设用户名为 test: ssh -oPort=6000 test@127.0.0.1 通过 frpc 所在机器访问外网frpc 内置了 http proxy 和 socks5 插件，可以使其他机器通过 frpc 的网络访问互联网。 frps 的部署步骤同上。 启动 frpc，启用 http_proxy 或 socks5 插件(plugin 换为 socks5 即可)， 配置如下： 123456789# frpc.ini[common]server_addr = x.x.x.xserver_port = 7000[http_proxy]type = tcpremote_port = 6000plugin = http_proxy 浏览器设置 http 或 socks5 代理地址为 x.x.x.x:6000，通过 frpc 机器的网络访问互联网。 功能说明配置文件由于 frp 目前支持的功能和配置项较多，未在文档中列出的功能可以从完整的示例配置文件中发现。 frps 完整配置文件 frpc 完整配置文件 Dashboard通过浏览器查看 frp 的状态以及代理统计信息展示。 需要在 frps.ini 中指定 dashboard 服务使用的端口，即可开启此功能： 12345[common]dashboard_port = 7500# dashboard 用户名密码，默认都为 admindashboard_user = admindashboard_pwd = admin 打开浏览器通过 http://[server_addr]:7500 访问 dashboard 界面，用户名密码默认为 admin。 身份验证从 v0.10.0 版本开始，所有 proxy 配置全部放在客户端(也就是之前版本的特权模式)，服务端和客户端的 common 配置中的 privilege_token 参数一致则身份验证通过。 需要注意的是 frpc 所在机器和 frps 所在机器的时间相差不能超过 15 分钟，因为时间戳会被用于加密验证中，防止报文被劫持后被其他人利用。 这个超时时间可以在配置文件中通过 authentication_timeout 这个参数来修改，单位为秒，默认值为 900，即 15 分钟。如果修改为 0，则 frps 将不对身份验证报文的时间戳进行超时校验。 加密与压缩这两个功能默认是不开启的，需要在 frpc.ini 中通过配置来为指定的代理启用加密与压缩的功能，压缩算法使用 snappy： 1234567# frpc.ini[ssh]type = tcplocal_port = 22remote_port = 6000use_encryption = trueuse_compression = true 如果公司内网防火墙对外网访问进行了流量识别与屏蔽，例如禁止了 ssh 协议等，通过设置 use_encryption = true，将 frpc 与 frps 之间的通信内容加密传输，将会有效防止流量被拦截。 如果传输的报文长度较长，通过设置 use_compression = true 对传输内容进行压缩，可以有效减小 frpc 与 frps 之间的网络流量，加快流量转发速度，但是会额外消耗一些 cpu 资源。 客户端热加载配置文件当修改了 frpc 中的代理配置，可以通过 frpc reload 命令来动态加载配置文件，通常会在 10 秒内完成代理的更新。 启用此功能需要在 frpc 中启用 admin 端口，用于提供 API 服务。配置如下： 1234# frpc.ini[common]admin_addr = 127.0.0.1admin_port = 7400 之后执行重启命令： frpc reload -c ./frpc.ini 等待一段时间后客户端会根据新的配置文件创建、更新、删除代理。 需要注意的是，[common] 中的参数除了 start 外目前无法被修改。 客户端查看代理状态frpc 支持通过 frpc status -c ./frpc.ini 命令查看代理的状态信息，此功能需要在 frpc 中配置 admin 端口。 特权模式由于从 v0.10.0 版本开始，所有 proxy 都在客户端配置，原先的特权模式是目前唯一支持的模式。 端口白名单为了防止端口被滥用，可以手动指定允许哪些端口被使用，在 frps.ini 中通过 privilege_allow_ports 来指定： 123# frps.ini[common]privilege_allow_ports = 2000-3000,3001,3003,4000-50000 privilege_allow_ports 可以配置允许使用的某个指定端口或者是一个范围内的所有端口，以 , 分隔，指定的范围以 - 分隔。 TCP 多路复用从 v0.10.0 版本开始，客户端和服务器端之间的连接支持多路复用，不再需要为每一个用户请求创建一个连接，使连接建立的延迟降低，并且避免了大量文件描述符的占用，使 frp 可以承载更高的并发数。 该功能默认启用，如需关闭，可以在 frps.ini 和 frpc.ini 中配置，该配置项在服务端和客户端必须一致： 123# frps.ini 和 frpc.ini 中[common]tcp_mux = false 底层通信可选 kcp 协议从 v0.12.0 版本开始，底层通信协议支持选择 kcp 协议，在弱网环境下传输效率提升明显，但是会有一些额外的流量消耗。 开启 kcp 协议支持： 在 frps.ini 中启用 kcp 协议支持，指定一个 udp 端口用于接收客户端请求： 12345# frps.ini[common]bind_port = 7000# kcp 绑定的是 udp 端口，可以和 bind_port 一样kcp_bind_port = 7000 在 frpc.ini 指定需要使用的协议类型，目前只支持 tcp 和 kcp。其他代理配置不需要变更： 123456# frpc.ini[common]server_addr = x.x.x.x# server_port 指定为 frps 的 kcp_bind_portserver_port = 7000protocol = kcp 像之前一样使用 frp，需要注意开放相关机器上的 udp 的端口的访问权限。 连接池默认情况下，当用户请求建立连接后，frps 才会请求 frpc 主动与后端服务建立一个连接。当为指定的代理启用连接池后，frp 会预先和后端服务建立起指定数量的连接，每次接收到用户请求后，会从连接池中取出一个连接和用户连接关联起来，避免了等待与后端服务建立连接以及 frpc 和 frps 之间传递控制信息的时间。 这一功能比较适合有大量短连接请求时开启。 首先可以在 frps.ini 中设置每个代理可以创建的连接池上限，避免大量资源占用，客户端设置超过此配置后会被调整到当前值： 123# frps.ini[common]max_pool_count = 5 在 frpc.ini 中为客户端启用连接池，指定预创建连接的数量： 123# frpc.ini[common]pool_count = 1 修改 Host Header通常情况下 frp 不会修改转发的任何数据。但有一些后端服务会根据 http 请求 header 中的 host 字段来展现不同的网站，例如 nginx 的虚拟主机服务，启用 host-header 的修改功能可以动态修改 http 请求中的 host 字段。该功能仅限于 http 类型的代理。 123456# frpc.ini[web]type = httplocal_port = 80custom_domains = test.yourdomain.comhost_header_rewrite = dev.yourdomain.com 原来 http 请求中的 host 字段 test.yourdomain.com 转发到后端服务时会被替换为 dev.yourdomain.com。 获取用户真实 IP目前只有 http 类型的代理支持这一功能，可以通过用户请求的 header 中的 X-Forwarded-For 和 X-Real-IP 来获取用户真实 IP。 需要注意的是，目前只在每一个用户连接的第一个 HTTP 请求中添加了这两个 header。 通过密码保护你的 web 服务由于所有客户端共用一个 frps 的 http 服务端口，任何知道你的域名和 url 的人都能访问到你部署在内网的 web 服务，但是在某些场景下需要确保只有限定的用户才能访问。 frp 支持通过 HTTP Basic Auth 来保护你的 web 服务，使用户需要通过用户名和密码才能访问到你的服务。 该功能目前仅限于 http 类型的代理，需要在 frpc 的代理配置中添加用户名和密码的设置。 1234567# frpc.ini[web]type = httplocal_port = 80custom_domains = test.yourdomain.comhttp_user = abchttp_pwd = abc 通过浏览器访问 http://test.yourdomain.com，需要输入配置的用户名和密码才能访问。 自定义二级域名在多人同时使用一个 frps 时，通过自定义二级域名的方式来使用会更加方便。 通过在 frps 的配置文件中配置 subdomain_host，就可以启用该特性。之后在 frpc 的 http、https 类型的代理中可以不配置 custom_domains，而是配置一个 subdomain 参数。 只需要将 *.{subdomain_host} 解析到 frps 所在服务器。之后用户可以通过 subdomain 自行指定自己的 web 服务所需要使用的二级域名，通过 {subdomain}.{subdomain_host} 来访问自己的 web 服务。 123# frps.ini[common]subdomain_host = frps.com 将泛域名 *.frps.com 解析到 frps 所在服务器的 IP 地址。 12345# frpc.ini[web]type = httplocal_port = 80subdomain = test frps 和 fprc 都启动成功后，通过 test.frps.com 就可以访问到内网的 web 服务。 需要注意的是如果 frps 配置了 subdomain_host，则 custom_domains 中不能是属于 subdomain_host 的子域名或者泛域名。 同一个 http 或 https 类型的代理中 custom_domains 和 subdomain 可以同时配置。 URL 路由frp 支持根据请求的 URL 路径路由转发到不同的后端服务。 通过配置文件中的 locations 字段指定一个或多个 proxy 能够匹配的 URL 前缀(目前仅支持最大前缀匹配，之后会考虑正则匹配)。例如指定 locations = /news，则所有 URL 以 /news 开头的请求都会被转发到这个服务。 123456789101112# frpc.ini[web01]type = httplocal_port = 80custom_domains = web.yourdomain.comlocations = /[web02]type = httplocal_port = 81custom_domains = web.yourdomain.comlocations = /news,/about 按照上述的示例配置后，web.yourdomain.com 这个域名下所有以 /news 以及 /about 作为前缀的 URL 请求都会被转发到 web02，其余的请求会被转发到 web01。 通过代理连接 frps在只能通过代理访问外网的环境内，frpc 支持通过 HTTP PROXY 和 frps 进行通信。 可以通过设置 HTTP_PROXY 系统环境变量或者通过在 frpc 的配置文件中设置 http_proxy 参数来使用此功能。 仅在 protocol = tcp 时生效。 12345# frpc.ini[common]server_addr = x.x.x.xserver_port = 7000http_proxy = http://user:pwd@192.168.1.128:8080 范围端口映射在 frpc 的配置文件中可以指定映射多个端口，目前只支持 tcp 和 udp 的类型。 这一功能通过 range: 段落标记来实现，客户端会解析这个标记中的配置，将其拆分成多个 proxy，每一个 proxy 以数字为后缀命名。 例如要映射本地 6000-6005, 6007 这6个端口，主要配置如下： 123456# frpc.ini[range:test_tcp]type = tcplocal_ip = 127.0.0.1local_port = 6000-6006,6007remote_port = 6000-6006,6007 实际连接成功后会创建 6 个 proxy，命名为 test_tcp_0, test_tcp_1 ... test_tcp_5。 插件默认情况下，frpc 只会转发请求到本地 tcp 或 udp 端口。 插件模式是为了在客户端提供更加丰富的功能，目前内置的插件有 unix_domain_socket、http_proxy、socks5、static_file。具体使用方式请查看使用示例。 通过 plugin 指定需要使用的插件，插件的配置参数都以 plugin_ 开头。使用插件后 local_ip 和 local_port 不再需要配置。 使用 http_proxy 插件的示例: 1234567# frpc.ini[http_proxy]type = tcpremote_port = 6000plugin = http_proxyplugin_http_user = abcplugin_http_passwd = abc plugin_http_user 和 plugin_http_passwd 即为 http_proxy 插件可选的配置参数。]]></content>
      <categories>
        <category>网络</category>
        <category>内网穿透</category>
      </categories>
      <tags>
        <tag>内网穿透</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解压命令大全]]></title>
    <url>%2F2018%2F04%2F06%2F%E8%A7%A3%E5%8E%8B%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8%2F</url>
    <content type="text"><![CDATA[.tar解包：tar xvf FileName.tar打包：tar cvf FileName.tar DirName（注：tar是打包，不是压缩！） .gz解压1：gunzip FileName.gz解压2：gzip -d FileName.gz压缩：gzip FileName .tar.gz 和 .tgz解压：tar zxvf FileName.tar.gz压缩：tar zcvf FileName.tar.gz DirName .bz2解压1：bzip2 -d FileName.bz2解压2：bunzip2 FileName.bz2压缩： bzip2 -z FileName .tar.bz2解压：tar jxvf FileName.tar.bz2压缩：tar jcvf FileName.tar.bz2 DirName .bz解压1：bzip2 -d FileName.bz解压2：bunzip2 FileName.bz压缩：未知 .tar.bz解压：tar jxvf FileName.tar.bz压缩：未知 .Z解压：uncompress FileName.Z压缩：compress FileName.tar.Z 解压：tar Zxvf FileName.tar.Z压缩：tar Zcvf FileName.tar.Z DirName .zip解压：unzip FileName.zip压缩：zip FileName.zip DirName .rar解压：rar x FileName.rar压缩：rar a FileName.rar DirName .lha解压：lha -e FileName.lha压缩：lha -a FileName.lha FileName .rpm解包：rpm2cpio FileName.rpm | cpio -div .deb解包：ar p FileName.deb data.tar.gz | tar zxf]]></content>
      <categories>
        <category>服务器</category>
        <category>linux指令</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker下安装mongoDB]]></title>
    <url>%2F2018%2F04%2F03%2Fdocker%E4%B8%8B%E5%AE%89%E8%A3%85mongoDB%2F</url>
    <content type="text"><![CDATA[有一个node项目需要看用到mongo，所以搭建一个mongo 环境，由于电脑上有docker 所有优先使用了docker下安装 首先让我们到 DockerHub 上溜一圈去，看看]]></content>
      <categories>
        <category>服务器</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>mongo</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac下常用软件、插件和驱动]]></title>
    <url>%2F2018%2F02%2F25%2Fmac%E4%B8%8B%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E3%80%81%E6%8F%92%E4%BB%B6%E5%92%8C%E9%A9%B1%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[一.常用免费 QQ 微信 QQ音乐 网易云音乐 搜狗输入法 TeamViewer Maipo 极致微博 12306 订票助手 ShadowsocksX-R iHost Hosts编辑器 live-recorder Bilibili录播机 iPic - 图床神器/支持 Markdown Thunder For Mac（备用会员版本） HandShaker Android手机文件管理 二.应用软件 Pixave 设计素材管理 Leaf RSS 新闻阅读器 Google Earth 谷歌地球 Quiver 程序猿的笔记本 Ulysses MD文本编辑器 1Password 密码管理工具 BetterZip 快速的压缩工具 Fantastical 优雅的日历软件 Airmail 最佳Mac邮件客户端 Tweetbot 优秀Twitter客户端 Papers 专业的文献管理工具 MindNode Pro 思维导图工具 iThoughtsX 优秀思维导图工具 DropDMG 轻松制作DMG文件 欧路词典 专为MAC而生的词典 Instant Translate 即时翻译工具 iSmartPhoto 看图&amp;相片智能管理 Reeder 将RSS阅读体验发挥到极致 4K Stogram 批量下载Instagram图片 Instastack 简单实用instagram客户端 PDF Expert 极致的PDF阅读标注工作体验 Alternote 第三方印象笔记Evernote 客户端 MWeb 专业的Markdown写作/记笔记/静态博客生成软件 三.媒体工具 VOX 全能音乐播放器 SPlayerX 射手播放器 Simplify 简单音乐控制器 ScreenFlow 屏幕录像软件 Motion 视频后期特效制作 FxFactory 视觉特效插件包 MPlayerX 开源视频播放应用 iMovie 苹果官方视频剪辑软件 Audirvana Plus 无损音乐播放器 VideoGIF 将视频剪辑为GIF动画 iFFmpeg Mac专业的视频压制软件 Final Cut Pro 专业级视频剪辑软件 VideoToolbox 简单好用的视频编辑工具 DaVinci Resolve Studio Mac顶级调色软件 Wondershare Video Converter Ultimate 万能视频格式转换器 四.网络工具 SiteSucker 扒站神器 Downie 视频下载工具 Folx Pro Mac下载工具 Charles Mac上的抓包工具 SSH Shell 便捷易用高颜值 Surge 必备的网络调试工具 Softorino YouTube Converte 五.开发工具 iTerm Xcode Atom For Mac Android Studio SourceTree Github管理 Sublime Text 3 for mac Dash 开发者必备 API文档聚合 Regextor 正则表达式测试工具 Navicat Premium 数据库管理工具 MyEclipse 2015 Java集成开发工具 Cornerstone Mac上最好用的SVN客户端 MAMP Pro for Mac 集成Web服务器环境 Beyond Compare for mac 文件对比利器 Araxis Merge 可视化文件对比合并同步工具 六.图形设计 Sip Pro 屏幕取色工具 Flinto 交互式设计神器 StarUML UML设计工具 IconKit 应用图标制作工具 Framer 移动交互原型设计工具 Principle Mac交互动效设计神器 Sketch 轻量易用的矢量设计工具 SkyLab Studio 为你的照片换个天 PaintCode 专业矢量图形绘图工具 PaintCode for Sketch 将绘图转为代码 Hype Pro 不会html5也能做出漂亮的动画 Axure RP Team Edition 专业的快速原型设计工具 Affinity Designer 迅捷/流畅/精确的矢量图形设计工具 Affinity Photo 专业级修图软件 七.行业软件 Deckset 幻灯片制作工具 Money Pro 同步账单/预算和账户 EndNote X8 论文参考文献管理工具 AutoCAD 2016 For Mac 强大的CAD绘图工具 EdrawMax 亿图图示专家 基于矢量的绘图工具 MATLAB R2016b for Mac 强大的商业数学软件 八.系统工具 Alfred 效率神器 Disk Drill 数据恢复工具 UninstallPKG 卸载工具 DaisyDisk 系统清理工具 CleanMyMac Mac中文版 CCleaner Pro 系统垃圾清扫软件 iStat Menus 优秀的系统监控工具 VMware Fusion 强大的虚拟机应用 Parallels Desktop 最佳Mac虚拟机解决方案 Moom 窗口布局工具 Boom 2 音效增强工具 Boom 3D 音效增强工具 RightFont 字体管理工具 TotalFinder Finder增强工具 Backgrounds 系统增强及美化工具 Tuxera NTFS 2016 让你的Mac支持NTFS Path Finder 超赞Mac资源 文件管理工具 OS X Server 5.2 让整个团队更高效地分享信息 九.OmniKit OmniGraffle Pro 强大的图形工具 OmniFocus 强大的任务管理软件 OmniOutliner Pro 日常工作想法记录 OmniPlan 专业版 最NB的项目管理流程软件 十.AdobeKit Adobe Photoshop CC 2017（附中文语言包） Adobe Experience Design CC 原型制作工具 Adobe Audition CC 2017 强大音频编辑工具 Adobe Animate CC Adobe全新动画制作工具 Adobe InDesign CC 2017 桌面出版与设计软件 Adobe Acrobat Pro DC 2015 强大的PDF编辑软件 Adobe Premiere Pro CC 2015 强大的视频编辑软件 Adobe Muse CC 2017 Adobe illustrator CC 2017 Adobe Lightroom CC 2015 Adobe After Effects CC 2015 Adobe Dreamweaver CC 2017 十一.OfficeKit iWork Pages iWork Keynote iWork Numbers Microsoft Office for Mac 2016 十二.JetbrainsKit IntelliJ IDEA Ultimate Edition 2017 Java开发工具 AppCode 2017 Objective-C集成开发环境 WebStorm 2017 Web前端开发神器 PHPStorm 2017 PHP IDE开发工具 RubyMine 2017 Ruby/Rails的IDE PyCharm 2017 Python IDE工具 DataGrip 2017 数据库管理工具 CLion 2017 C/C++开发工具 十三.Chrome应用扩展 划词翻译 哔哩哔哩助手 Infinity新标签页 Google学术搜索按钮 FireShot捕捉网页截图 Holmes 书签/历史搜索 ColorZilla 网页取色工具 Tampermonkey 油猴脚本 WEB前端助手（FeHelper） Stylish-为任意网站自定义主题 Octotree Github-plus qiniu upload files Bookmark Manager LastPass: PWManager Voblet GitHub Bookmark 十四.HackintoshKit Clover Configurator 助手工具 Clover EFI Bootloader 引导工具 ESP Mounter Pro 装载EFI分区 AppleHDA Patcher 声卡驱动工具 EasyKext Pro 驱动安装和权限修复 KCPM Utility Pro 驱动安装和权限修复 LazyHackintoshGenerator 镜像制作工具 Patch-Nvme FireWolf OS X PE V7.0 VMware Unlocker for OS X Acpica iasl 反编译脚步工具 MaciASL DSDT和SSDT工具 OS-X-Clover-Laptop-Config NVIDIA® WebDriver Updater CPU-S CPU变频测试 Geekbench 4 跑分测试 CINEBENCH R15 跑分测试 十五.常用驱动 RehabMan Bitbucket 驱动&amp;工具 AppleALC Native macOS HD audio Lilu Arbitrary kext and Process Patching OS-X-Fake-PCI-ID OS-X-USBInject-All OS-X-Intel-Network OS-X-Intel-Backlight OS-X-Realtek-Network OS-X-BrcmPatchRAM OS-X-FakeSMC-kozlek OS-X-ACPI-Battery-Driver OS-X-Voodoo-PS2-Controller OS-X-EAPD-Codec-Commander]]></content>
      <categories>
        <category>笔记本</category>
        <category>macOS</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac下内网穿透工具]]></title>
    <url>%2F2018%2F02%2F24%2FMac%E4%B8%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[natapp是基于ngrok的国内高速内网穿透专业服务商，适用于微信开发调试,本地架设演示服务器,外网可以访问,远程服务器等。 官网链接 使用方法1.在开始之前，我们需要先注册一下，这里很简单，只要输入手机号和验证码就可以注册了2.注册完之后，我们登入可以看到界面的左侧菜单栏，点击购买隧道，这里我选择免费隧道3.需要实名认证4.然后就可以使用免费的通道了将下载的文件设置可以执行权限 1chmod u+x natapp 开始运行 1./natapp -authtoken=********]]></content>
      <categories>
        <category>网络</category>
        <category>内网穿透</category>
      </categories>
      <tags>
        <tag>微信开发</tag>
        <tag>内网穿透</tag>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS7.3升级mariadb至10.2]]></title>
    <url>%2F2018%2F02%2F14%2FCentOS7.3%E5%8D%87%E7%BA%A7mariadb%E8%87%B310.2%2F</url>
    <content type="text"><![CDATA[安装gogs因为数据库版本太低只好升级数据库了，从github上得知MariaDB似乎10.2以上就可以解决问题了，只好升级了由于CentOS7 自带数据库 版本太低了，只能升级数据库了😭要升级原来centOS7默认带的数据库5.5，先要添加respos地址，在下面目录下新建MariaDB.repo文件 12345[root@sweet yum.repos.d]# pwd/etc/yum.repos.d[root@sweet yum.repos.d]# lsCentOS-Base.repo epel.repo MariaDB.repo[root@sweet yum.repos.d]# 在文件里写入下面的信息 12345678[root@sweet yum.repos.d]# cat MariaDB.repo\#MariaDB 10.2 CentOS repository list - created 2017-12-01 11:36 UTC\# http://downloads.mariadb.org/mariadb/repositories/[mariadb]name = MariaDBbaseurl = https://mirrors.ustc.edu.cn/mariadb/yum/10.2/centos7-amd64gpgkey=https://mirrors.ustc.edu.cn/mariadb/yum/RPM-GPG-KEY-MariaDBgpgcheck=1 然后就可以安装软件了，成功之后登录名和旧数据库相同 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102[root@sweet yum.repos.d]# sudo yum install MariaDB-server MariaDB-clientLoaded plugins: fastestmirrorbase | 3.6 kB 00:00:00epel | 4.7 kB 00:00:00extras | 3.4 kB 00:00:00mariadb | 2.9 kB 00:00:00updates | 3.4 kB 00:00:00(1/8): base/7/x86_64/group_gz | 156 kB 00:00:00(2/8): epel/x86_64/updateinfo | 880 kB 00:00:00(3/8): epel/x86_64/group_gz | 266 kB 00:00:00(4/8): extras/7/x86_64/primary_db | 166 kB 00:00:00(5/8): base/7/x86_64/primary_db | 5.7 MB 00:00:00(6/8): epel/x86_64/primary_db | 6.2 MB 00:00:00(7/8): updates/7/x86_64/primary_db | 6.0 MB 00:00:00(8/8): mariadb/primary_db | 22 kB 00:00:00Determining fastest mirrorsResolving Dependencies--&gt; Running transaction check---&gt; Package MariaDB-client.x86_64 0:10.2.13-1.el7.centos will be installed--&gt; Processing Dependency: MariaDB-common for package: MariaDB-client-10.2.13-1.el7.centos.x86_64---&gt; Package MariaDB-server.x86_64 0:10.2.13-1.el7.centos will be installed--&gt; Processing Dependency: galera for package: MariaDB-server-10.2.13-1.el7.centos.x86_64--&gt; Processing Dependency: lsof for package: MariaDB-server-10.2.13-1.el7.centos.x86_64--&gt; Running transaction check---&gt; Package MariaDB-common.x86_64 0:10.2.13-1.el7.centos will be installed--&gt; Processing Dependency: MariaDB-compat for package: MariaDB-common-10.2.13-1.el7.centos.x86_64---&gt; Package galera.x86_64 0:25.3.23-1.rhel7.el7.centos will be installed--&gt; Processing Dependency: libboost_program_options.so.1.53.0()(64bit) for package: galera-25.3.23-1.rhel7.el7.centos.x86_64---&gt; Package lsof.x86_64 0:4.87-4.el7 will be installed--&gt; Running transaction check---&gt; Package MariaDB-compat.x86_64 0:10.2.13-1.el7.centos will be installed---&gt; Package boost-program-options.x86_64 0:1.53.0-27.el7 will be installed--&gt; Finished Dependency ResolutionDependencies Resolved========================================================================================================== Package Arch Version Repository Size==========================================================================================================Installing: MariaDB-client x86_64 10.2.13-1.el7.centos mariadb 48 M MariaDB-server x86_64 10.2.13-1.el7.centos mariadb 110 MInstalling for dependencies: MariaDB-common x86_64 10.2.13-1.el7.centos mariadb 155 k MariaDB-compat x86_64 10.2.13-1.el7.centos mariadb 2.8 M boost-program-options x86_64 1.53.0-27.el7 base 156 k galera x86_64 25.3.23-1.rhel7.el7.centos mariadb 8.0 M lsof x86_64 4.87-4.el7 base 331 kTransaction Summary==========================================================================================================Install 2 Packages (+5 Dependent packages)Total download size: 169 MInstalled size: 719 MIs this ok [y/d/N]: yDownloading packages:warning: /var/cache/yum/x86_64/7/mariadb/packages/MariaDB-10.2.13-centos73-x86_64-common.rpm: Header V4 DSA/SHA1 Signature, key ID 1bb943db: NOKEYPublic key for MariaDB-10.2.13-centos73-x86_64-common.rpm is not installed(1/7): MariaDB-10.2.13-centos73-x86_64-common.rpm | 155 kB 00:00:00(2/7): MariaDB-10.2.13-centos73-x86_64-compat.rpm | 2.8 MB 00:00:00(3/7): boost-program-options-1.53.0-27.el7.x86_64.rpm | 156 kB 00:00:00(4/7): MariaDB-10.2.13-centos73-x86_64-client.rpm | 48 MB 00:00:08(5/7): lsof-4.87-4.el7.x86_64.rpm | 331 kB 00:00:00(6/7): MariaDB-10.2.13-centos73-x86_64-server.rpm | 110 MB 00:00:09(7/7): galera-25.3.23-1.rhel7.el7.centos.x86_64.rpm | 8.0 MB 00:00:03----------------------------------------------------------------------------------------------------------Total 14 MB/s | 169 MB 00:00:12Retrieving key from https://mirrors.ustc.edu.cn/mariadb/yum/RPM-GPG-KEY-MariaDBImporting GPG key 0x1BB943DB: Userid : &quot;MariaDB Package Signing Key &lt;package-signing-key@mariadb.org&gt;&quot; Fingerprint: 1993 69e5 404b d5fc 7d2f e43b cbcb 082a 1bb9 43db From : https://mirrors.ustc.edu.cn/mariadb/yum/RPM-GPG-KEY-MariaDBIs this ok [y/N]: yRunning transaction checkRunning transaction testTransaction test succeededRunning transaction Installing : MariaDB-common-10.2.13-1.el7.centos.x86_64 1/7 Installing : MariaDB-compat-10.2.13-1.el7.centos.x86_64 2/7 Installing : MariaDB-client-10.2.13-1.el7.centos.x86_64 3/7 Installing : boost-program-options-1.53.0-27.el7.x86_64 4/7 Installing : galera-25.3.23-1.rhel7.el7.centos.x86_64 5/7 Installing : lsof-4.87-4.el7.x86_64 6/7 Installing : MariaDB-server-10.2.13-1.el7.centos.x86_64 7/7 Verifying : MariaDB-client-10.2.13-1.el7.centos.x86_64 1/7 Verifying : MariaDB-compat-10.2.13-1.el7.centos.x86_64 2/7 Verifying : lsof-4.87-4.el7.x86_64 3/7 Verifying : galera-25.3.23-1.rhel7.el7.centos.x86_64 4/7 Verifying : MariaDB-common-10.2.13-1.el7.centos.x86_64 5/7 Verifying : boost-program-options-1.53.0-27.el7.x86_64 6/7 Verifying : MariaDB-server-10.2.13-1.el7.centos.x86_64 7/7Installed: MariaDB-client.x86_64 0:10.2.13-1.el7.centos MariaDB-server.x86_64 0:10.2.13-1.el7.centosDependency Installed: MariaDB-common.x86_64 0:10.2.13-1.el7.centos MariaDB-compat.x86_64 0:10.2.13-1.el7.centos boost-program-options.x86_64 0:1.53.0-27.el7 galera.x86_64 0:25.3.23-1.rhel7.el7.centos lsof.x86_64 0:4.87-4.el7Complete!]]></content>
      <categories>
        <category>服务器</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>Maria DB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS7 gogs安装及二级域名nginx代理]]></title>
    <url>%2F2018%2F02%2F12%2Fgit%E6%9C%8D%E5%8A%A1%E5%99%A8gogs%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[搭建gogs服务一、基础环境配置 (git和数据库)1、 git和数据库的安装由于机器(CentOS7)上没有Git 所以先要安装git 1yum install -y git 数据库安装就不演示了，本博客已经有了 2、在系统上新建账号在系统上添加一个git的系统账号，用来启动gogs软件，这样比较好 12root@sweet:~$ useradd gitroot@sweet:~$ passwd git 切换到git用户，生成 ssh 1git@sweet:~$ ssh-keygen -t rsa 二、安装gogs1、gogs下载安装下载对应的二进制文件 https://gogs.io/docs/installation/install_from_binary 1234567891011[root@sweet ~]# wget https://dl.gogs.io/0.11.34/linux_amd64.tar.gz--2018-02-17 11:31:09-- https://dl.gogs.io/0.11.34/linux_amd64.tar.gzResolving dl.gogs.io (dl.gogs.io)... 138.68.27.161Connecting to dl.gogs.io (dl.gogs.io)|138.68.27.161|:443... connected.HTTP request sent, awaiting response... 200 OKLength: 18688444 (18M) [application/x-gzip]Saving to: ‘linux_amd64.tar.gz.1’100%[======================================&gt;] 18,688,444 4.33MB/s in 4.1s2018-02-17 11:31:15 (4.33 MB/s) - ‘linux_amd64.tar.gz.1’ saved [18688444/18688444] 解压文件 123[root@sweet ~]# lslinux_amd64.tar.gz[root@sweet ~]# tar zxvf linux_amd64.tar.gz 将文件移动到 etc 目录下，并且将所有权授权给git用户 12[root@sweet ~]# mv gogs/ /etc/[root@sweet etc]# chown git -R gogs/ 2、数据库配置接下来就是准备数据库配置了 1、创建数据库gogs2、创建数据库gogs用户3、将gogs数据库授权给gogs用户 （1）创建数据库 12mysql -u root -p &lt; scripts/mysql.sqlEnter password: 上面执行的sql其实为： 12DROP DATABASE IF EXISTS gogs;CREATE DATABASE IF NOT EXISTS gogs CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci; （2）创建数据库用户并授权 123456$ mysql -u root -pEnter password:mysql&gt; create user &apos;gogs&apos;@&apos;localhost&apos; identified by &apos;your_password&apos;;mysql&gt; grant all privileges on gogs.* to &apos;gogs&apos;@&apos;localhost&apos;;mysql&gt; flush privileges;mysql&gt; exit （3）然后我们就可以尝试启动了，在gog文件夹下 1[root@sweet gogs]# ./gogs web 启动如下图 但是填好后提交出现错误，搜索之后的需要升级数据库，这块内容在另外一个博客里最后，我们数据库搞定之后就可以看到如下界面了登录页面如果你在第一次初始化的时候没有设置管理员，直接注册一个，第一个用户默认为管理员。 剩下的就不多说了，用法和github 类似。 Nginx 二级域名反向代理是不是每次输入一个域名后面跟着一个3000 很烦呀，没关系我们有解决的办法，那就是使用nginx代理，下面就是方法 用的是阿里的域名，添加二级域名如下图在nginx目录下配置,添加如下文件 12[root@sweet ~]# cd /etc/nginx/conf.d/[root@sweet conf.d]# vim gogs.conf gogs.conf 内配置的内容为： 12345678910server &#123; server_name git.sweetm.top; listen 80; #ssl on; location /&#123; proxy_pass http://127.0.0.1:3000/; proxy_redirect default; &#125;&#125; 然后就是我们大功告成了！]]></content>
      <categories>
        <category>服务器</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>Gogs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOs7安装MariaDB5.5]]></title>
    <url>%2F2018%2F02%2F11%2FCentOs7%E5%AE%89%E8%A3%85MariaDB5-5%2F</url>
    <content type="text"><![CDATA[安装基于 CentOS 7 的默认版本数据库 Maria DB[1]安装 MariaDB 5.512345678[root@www ~]# yum -y install mariadb-server[root@www ~]# vi /etc/my.cnf将编码改为UTF-8 防止中文乱码[mysqld]character-set-server=utf8[root@www ~]# systemctl start mariadb [root@www ~]# systemctl enable mariadb ln -s &apos;/usr/lib/systemd/system/mariadb.service&apos; &apos;/etc/systemd/system/multi-user.target.wants/mariadb.service&apos; [2]设置 Maria DB 第一次需要初始化数据库密码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100[root@www ~]# mysql_secure_installation NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY!In order to log into MariaDB to secure it, we&apos;ll need the currentpassword for the root user. If you&apos;ve just installed MariaDB, andyou haven&apos;t set the root password yet, the password will be blank,so you should just press enter here.Enter current password for root (enter for none):OK, successfully used password, moving on...Setting the root password ensures that nobody can log into the MariaDBroot user without the proper authorisation.\# set root passwordSet root password? [Y/n] yNew password:Re-enter new password:Password updated successfully!Reloading privilege tables.. ... Success!By default, a MariaDB installation has an anonymous user, allowing anyoneto log into MariaDB without having to have a user account created forthem. This is intended only for testing, and to make the installationgo a bit smoother. You should remove them before moving into aproduction environment.\# remove anonymous usersRemove anonymous users? [Y/n] y ... Success!Normally, root should only be allowed to connect from &apos;localhost&apos;. Thisensures that someone cannot guess at the root password from the network.\# disallow root login remotelyDisallow root login remotely? [Y/n] y ... Success!By default, MariaDB comes with a database named &apos;test&apos; that anyone canaccess. This is also intended only for testing, and should be removedbefore moving into a production environment.\# remove test databaseRemove test database and access to it? [Y/n] y - Dropping test database... ... Success! - Removing privileges on test database... ... Success!Reloading the privilege tables will ensure that all changes made so farwill take effect immediately.\# reload privilege tablesReload privilege tables now? [Y/n] y ... Success!Cleaning up...All done! If you&apos;ve completed all of the above steps, your MariaDBinstallation should now be secure.Thanks for using MariaDB!\# connect to MariaDB with root[root@www ~]# mysql -u root -p Enter password: # MariaDB root password you setWelcome to the MariaDB monitor. Commands end with ; or \g.Your MariaDB connection id is 3Server version: 5.5.37-MariaDB MariaDB ServerCopyright (c) 2000, 2014, Oracle, Monty Program Ab and others.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.\# show user listMariaDB [(none)]&gt; select user,host,password from mysql.user; +------+-----------+-------------------------------------------+| user | host | password |+------+-----------+-------------------------------------------+| root | localhost | *xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx || root | 127.0.0.1 | *xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx || root | ::1 | *xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx |+------+-----------+-------------------------------------------+3 rows in set (0.00 sec)\# show database listMariaDB [(none)]&gt; show databases; +--------------------+| Database |+--------------------+| information_schema || mysql || performance_schema |+--------------------+3 rows in set (0.00 sec)MariaDB [(none)]&gt; exitBye 安装完成]]></content>
      <categories>
        <category>服务器</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySql</tag>
        <tag>CentOS7</tag>
        <tag>Maria DB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[收集计算机书籍]]></title>
    <url>%2F2018%2F02%2F10%2F%E6%94%B6%E9%9B%86%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%A6%E7%B1%8D%2F</url>
    <content type="text"><![CDATA[ReactiveX/RxJava文档中文版 https://mcxiaoke.gitbooks.io/rxdocs/content/Docker — 从入门到实践 https://www.gitbook.com/book/yeasy/docker_practice/details]]></content>
      <categories>
        <category>计算机</category>
        <category>书籍</category>
      </categories>
      <tags>
        <tag>技术书籍</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[地图投影和坐标系概念]]></title>
    <url>%2F2018%2F02%2F10%2F%E5%9C%B0%E5%9B%BE%E6%8A%95%E5%BD%B1%E5%92%8C%E5%9D%90%E6%A0%87%E7%B3%BB%E6%A6%82%E5%BF%B5%2F</url>
    <content type="text"><![CDATA[面对地图坐标之间的关系，一脸懵 ，收集整合资料 基本概念地理坐标系：为球面坐标。 参考平面地是椭球面，坐标单位：经纬度；投影坐标系：为平面坐标。参考平面地是水平面，坐标单位：米、千米等；地理坐标转换到投影坐标的过程可理解为投影。（投影：将不规则的地球曲面转换为平面） 1、投影坐标系地图投影的种类很多，一般按照两种标准进行分类：一是按投影的变形性质分类，二是按照投影的构成方式分类。 1.1 按投影变形性质分类按照投影的变形性质可以分为以下几类：等角投影、等积投影、任意投影。 1.1.1 等角投影能保持无限小图形的相似。同一点上长度比处处相同-变形圆，不同点变形圆的半径不同，大范围看，投影图形与地面实际形状并不完全相似。由于这种投影无角度变形，便于图上量测方向/角度，所以常用于对真实角度和方向要求高的地图，比如航海、洋流和风向图等。由于此类投影面积变形很大，故不能量算面积。 1.1.2 等面积投影等积投影是等面积投影，便于面积的比较和量算。常用于对面积精度要求较高的自然和经济地图，如地质、土壤、土地利用、行政区划等地图。 1.1.3 任意投影任意投影既不等角又不等积，各方面变形都存在，但都适中。在任意投影中，有一类比较特殊的投影叫做等距投影，满足正轴投影中经线长度比为1，在斜轴或横轴投影中垂直圈长度比为1。任意投影常用于教学地图、科学参考地图和通用世界地图等。 1.2 按投影构成方式分类根据投影构成方式可以分为两类：几何投影和解析投影。 1.2.1几何投影几何投影是把椭球体面上的经纬网直接或附加某种条件投影到几何承影面上，然后将几何面展开为平面而得到的一类投影，包括方位投影、圆锥投影和圆柱投影。根据投影面与球面的位置关系的不同又可将其划分为：正轴投影、横轴投影、斜轴投影。如下图所示： a 方位投影：以平面作为几何承影面，使平面与椭球体面相切或相割，将球面经纬网投影到平面上而成的投影。在切点或割线上无任何变形，离切点或割线越远，变形越大。 b 圆锥投影：以圆锥作为几何承影面，使圆锥与椭球体面相切或相割，将球面经纬网投影到圆锥面上而成的投影。该投影适用于中纬度地带沿纬线方向伸展地区的地图，我国的地图多用此投影。 c 圆柱投影：以圆柱作为几何承影面，使圆柱与椭球体面相切或相割，将球面经纬网投影到圆柱面上而成的投影。该投影方式一般适用于编制赤道附近地区的地图和世界地图。 1.2.2 解析投影解析投影是不借助于辅助几何面，直接用解析法得到经纬网的一种投影。主要包括：伪方位投影，伪圆锥投影，伪圆柱投影，多圆锥投影。此处不再赘述。 a 伪方位投影：据方位投影修改而来。在正轴情况下，纬线仍为同心圆，除中央经线为直线外，其余经线均改为中央经线的曲线，且相交于纬线的圆心。 b 伪圆柱投影：据圆柱投影修改而来。在正轴圆柱投影的基础上，要求纬线仍为平行直线，除中央经线为直线外，其余的经线均改为对称于中央经线的曲线。c 伪圆锥投影：据圆锥投影修改而来。在正轴圆锥投影的基础上，要求经线仍为同心圆弧，除中央经线为直线外，其余的经线均改为对称于中央经线的曲线。d 多圆锥投影：这是一种假想借助多个圆锥表面与球体相切而设计成的投影。纬线为同轴圆弧，其圆心均位于中央经线上，中央经线为直线，其余的经线均为对称于中央经线的曲线。 1.3常见的投影1． 墨卡托(Mercator)投影%E6%8A%95%E5%BD%B1%20.jpg) 墨卡托(Mercator)投影，是一种”等角正切圆柱投影”，荷兰地图学家墨卡托（Gerhardus Mercator 1512－1594）在1569年拟定，假设地球被围在一中空的圆柱里，其标准纬线与圆柱相切接触，然后再假想地球中心有一盏灯，把球面上的图形投影到圆柱体上，再把圆柱体展开，这就是一幅选定标准纬线上的“墨卡托投影”绘制出的地图。墨卡托投影没有角度变形，由每一点向各方向的长度比相等，它的经纬线都是平行直线，且相交成直角，经线间隔相等，纬线间隔从标准纬线向两极逐渐增大。墨卡托投影的地图上长度和面积变形明显，但标准纬线无变形，从标准纬线向两极变形逐渐增大，但因为它具有各个方向均等扩大的特性，保持了方向和相互位置关系的正确。在地图上保持方向和角度的正确是墨卡托投影的优点，墨卡托投影地图常用作航海图和航空图，如果循着墨卡托投影图上两点间的直线航行，方向不变可以一直到达目的地，因此它对船舰在航行中定位、确定航向都具有有利条件，给航海者带来很大方便。“海底地形图编绘规范”（GB/T 17834-1999，海军航保部起草）中规定1：25万及更小比例尺的海图采用墨卡托投影，其中基本比例尺海底地形图（1：5万，1：25万，1：100万）采用统一基准纬线30°，非基本比例尺图以制图区域中纬为基准纬线。基准纬线取至整度或整分。 墨卡托投影坐标系取零子午线或自定义原点经线(L0)与赤道交点的投影为原点，零子午线或自定义原点经线的投影为纵坐标X轴，赤道的投影为横坐标Y轴，构成墨卡托平面直角坐标系。 2． 高斯-克吕格(Gauss-Kruger)投影和UTM（Universal Transverse Mercator）投影######（1）高斯-克吕格投影性质 高斯-克吕格(Gauss-Kruger)投影简称“高斯投影”，又名”等角横切椭圆柱投影”，地球椭球面和平面间正形投影的一种。德国数学家、物理学家、天文学家高斯（Carl FriedrichＧauss，1777一 1855）于十九世纪二十年代拟定，后经德国大地测量学家克吕格（Johannes Kruger，1857～1928）于 1912年对投影公式加以补充，故名。该投影按照投影带中央子午线投影为直线且长度不变和赤道投影为直线的条件，确定函数的形式，从而得到高斯一克吕格投影公式。投影后，除中央子午线和赤道为直线外， 其他子午线均为对称于中央子午线的曲线。设想用一个椭圆柱横切于椭球面上投影带的中央子午线，按上述投影条件，将中央子午线两侧一定经差范围内的椭球面正形投影于椭圆柱面。将椭圆柱面沿过南北极的母线剪开展平，即为高斯投影平面。取中央子午线与赤道交点的投影为原点，中央子午线的投影为纵坐标x轴，赤道的投影为横坐标y轴，构成高斯克吕格平面直角坐标系。高斯-克吕格投影在长度和面积上变形很小，中央经线无变形，自中央经线向投影带边缘，变形逐渐增加，变形最大之处在投影带内赤道的两端。由于其投影精度高，变形小，而且计算简便（各投影带坐标一致，只要算出一个带的数据，其他各带都能应用），因此在大比例尺地形图中应用，可以满足军事上各种需要，能在图上进行精确的量测计算。 ######（2）高斯-克吕格投影分带 按一定经差将地球椭球面划分成若干投影带,这是高斯投影中限制长度变形的最有效方法。分带时既要控制长度变形使其不大于测图误差，又要使带数不致过多以减少换带计算工作，据此原则将地球椭球面沿子午线划分成经差相等的瓜瓣形地带,以便分带投影。通常按经差6度或3度分为六度带或三度带。六度带自0度子午线起每隔经差6度自西向东分带，带号依次编为第 1、2…60带。三度带是在六度带的基础上分成的，它的中央子午线与六度带的中央子午线和分带子午线重合，即自 1.5度子午线起每隔经差3度自西向东分带，带号依次编为三度带第 1、2…120带。我国的经度范围西起 73°东至135°，可分成六度带十一个，各带中央经线依次为75°、81°、87°、……、117°、123°、129°、135°，或三度带二十二个。六度带可用于中小比例尺（如 1：250000）测图，三度带可用于大比例尺（如 1：10000）测图，城建坐标多采用三度带的高斯投影。 （3）高斯-克吕格投影坐标高斯- 克吕格投影是按分带方法各自进行投影，故各带坐标成独立系统。以中央经线投影为纵轴(x), 赤道投影为横轴(y),两轴交点即为各带的坐标原点。纵坐标以赤道为零起算，赤道以北为正，以南为负。我国位于北半球，纵坐标均为正值。横坐标如以中央经线为零起算，中央经线以东为正，以西为负，横坐标出现负值，使用不便，故规定将坐标纵轴西移500公里当作起始轴，凡是带内的横坐标值均加 500公里。由于高斯-克吕格投影每一个投影带的坐标都是对本带坐标原点的相对值，所以各带的坐标完全相同，为了区别某一坐标系统属于哪一带，在横轴坐标前加上带号，如(4231898m,21655933m)，其中21即为带号。 （4）高斯-克吕格投影与UTM投影某些国外的软件如ARC/INFO或国外仪器的配套软件如多波束的数据处理软件等，往往不支持高斯-克吕格投影，但支持UTM投影，因此常有把UTM投影坐标当作高斯-克吕格投影坐标提交的现象。 UTM投影全称为“通用横轴墨卡托投影”，是等角横轴割圆柱投影（高斯-克吕格为等角横轴切圆柱投影），圆柱割地球于南纬80度、北纬84度两条等高圈，该投影将地球划分为60个投影带，每带经差为6度，已被许多国家作为地形图的数学基础。UTM投影与高斯投影的主要区别在南北格网线的比例系数上，高斯-克吕格投影的中央经线投影后保持长度不变，即比例系数为1，而UTM投影的比例系数为0.9996。UTM投影沿每一条南北格网线比例系数为常数，在东西方向则为变数，中心格网线的比例系数为0.9996，在南北纵行最宽部分的边缘上距离中心点大约 363公里，比例系数为 1.00158。 高斯-克吕格投影与UTM投影可近似采用 Xutm=0.9996 X高斯，Yutm=0.9996 Y高斯进行坐标转换。以下举例说明(基准面为WGS84)： 输入坐标（度） 高斯投影（米） UTM投影（米） Xutm=0.9996 X高斯, Yutm=0.9996 Y高斯 纬度值（X）32 3543600.9 3542183.5 3543600.9*0.9996 ≈ 3542183.5 经度值（Y）121 21310996.8 311072.4 (310996.8-500000)*0.9996+500000 ≈ 311072.4 注：坐标点（32,121）位于高斯投影的21带，高斯投影Y值21310996.8中前两位“21”为带号；坐标点（32,121）位于UTM投影的51带，上表中UTM投影的Y值没加带号。因坐标纵轴西移了500000米，转换时必须将Y值减去500000乘上比例因子后再加500000。 2、地理坐标系2.1 地球的三级逼近2.1.1大地水准面地球的自然表面有高山也有洼地，是崎岖不平的，我们要使用数学法则来描述他，就必须找到一个相对规则的数学面。 大地水准面是地球表面的第一级逼近。假设当海水处于完全静止的平衡状态时，从海平面延伸到所有大陆下部，而与地球重力方向处处正交的一个连续、闭合的曲面，这就是大地水准面。 2.1.2地球椭球体大地水准面可以近似成一个规则成椭球体，但并不是完全规则，其形状接近一个扁率极小的椭圆绕短轴旋转所形成的规则椭球体，这个椭球体称为地球椭球体。它是地球的第二级逼近。 下面列举了一些常见椭球体的参数。我国1952年以前采用海福特椭球体，从1953年起采用克拉索夫斯基椭球体。 1978年我国决定采用新椭球体GRS（1975），并以此建立了我国新的、独立的大地坐标系，对应ArcGIS里面的Xian_1980椭球体。从1980年开始采用新椭球体GRS（1980），这个椭球体参数与ArcGIS中的CGCS2000椭球体相同。 2.1.3大地基准面确定了一个规则的椭球表面以后，我们会发现还有一个问题，参考椭球体是对地球的抽象，因此其并不能去地球表面完全重合，在设置参考椭球体的时候必然会出现有的地方贴近的好（参考椭球体与地球表面位置接近），有地地方贴近的不好的问题，因此这里还需要一个大地基准面来控制参考椭球和地球的相对位置。 这是地球表面的第三级逼近。有以下两类基准面： 地心基准面：由卫星数据得到，使用地球的质心作为原点，使用最广泛的是 WGS 1984。 区域基准面：特定区域内与地球表面吻合，大地原点是参考椭球与大地水准面相切的点，例如Beijing54、Xian80。我们通常称谓的Beijing54、Xian80坐标系实际上指的是我国的两个大地基准面。 我们通常说的参心大地坐标系和地心大地坐标系的区别就在于此。参心大地坐标系：指经过定位与定向后，地球椭球的中心不与地球质心重合而是接近地球质心。区域性大地坐标系。是我国基本测图和常规大地测量的基础。如Beijing54、Xian80。地心大地坐标系：指经过定位与定向后，地球椭球的中心与地球质心重合。如CGCS2000、WGS84。 2.2 地理坐标地理坐标，就是用经线（子午线）、纬线、经度、纬度表示地面点位的球面坐标。 一般地理坐标可分为三种，天文经纬度，大地经纬度，地心经纬度。通常地图上使用的经纬度都为大地经纬度，所以这里我介绍一下大地经纬度，其他两种要想了解的话可以百度一下，其实区别不大。 大地经纬度：大地经度：参考椭球面上某点的大地子午面与本初子午面间的两面角。东正西负。 大地纬度 ：参考椭球面上某点的法线与赤道平面的夹角。北正南负。 大地高： 指某点沿法线方向到参考椭球面的距离。 看到这里，地理坐标系的思路基本明确的了吧！只需要参考椭球体参数以及大地基准面就可以确定地理坐标系。下面是Arcgis中对北京1954坐标系的说明。主要就是以下几个参数：123Prime Meridian（起始经度）Datum（大地基准面）: D_Beijing_1954Spheroid（参考椭球体）: Krasovsky_1940 （克拉索夫斯基椭球体） 常见的问题1）说“经纬度投影”对吗？ 经纬度表示的是地理坐标系（单位是度），不是投影坐标系（单位是米），两者放一起明显不妥。 2）大地坐标系与地理坐标系有何不同？ 大地坐标系和地理坐标系都是经纬度表示的坐标系，本身并不包含投影信息，很多时候，这两种说法都是相同的。 3）为什么有地理坐标系和投影坐标系之分？ 由于经纬度的度数不对应某一标准长度，因此无法精确测量距离或面积，也难以在平面地图或计算机屏幕上显示数据。在使用许多（不是全部）GIS 分析和制图应用程序时，经常需要由投影坐标系提供的更稳定的平面坐标框架。与地理坐标系不同，在二维空间范围内，投影坐标系的长度、角度和面积恒定。投影坐标系始终基于地理坐标系，而后者则是基于球体或旋转椭球体的。在投影坐标系中，通过格网上的 x,y 坐标来标识位置，其原点位于格网中心。 4）通常所说的西安80，北京54是指什么？ GIS中的坐标系统定义由基准面和地图投影两组参数确定，基准面对应一个参考椭球体，我们常说的北京54、西安80、国家大地2000坐标系都是指其参考椭球体。基于这种椭球体，我们能定义出大地坐标系和投影坐标系。只说一个西安80是不能确定坐标系统的，因为没有说明有没有投影及投影信息。如果不指明投影方式，则认为西安80、北京54的表现形式为大地坐标，而不是投影平面直角坐标。 5）什么都是高斯投影 ？ 高斯-克吕格投影属于横轴墨卡托投影，能小范围内保持形状不变，因此被国内普遍采用，但在表示小比例尺数据时，这种投影明显不合适。就中国来说，一般50万以上比例尺采用高斯投影，50万以下采用兰伯特投影。数据用途不同，具体的投影方式各有不同，有的是为了保持面积不变，有的是为了保持形状不变。另一种世界常用的投影是UTM（通用墨卡托投影），高斯-克吕格投影是“等角横切椭圆柱投影”，投影后中央经线保持长度不变，即比例系数为1；UTM投影是“等角横轴割圆柱投影”，圆柱割地球于南纬80度、北纬84度两条等高圈，投影后两条割线上没有变形，中央经线上长度比 0.9996。 6）北京54，西安80，WGS84，国家2000 有何不同？ 54和80本质上是参心坐标系，大地原点分别在苏联和西安，原点是参考椭球的几何中心，这类坐标难以表达高度信息，精度信息等也不够，正被淘汰。。 84和2000本质上是地心坐标系，即以地球质量中心作为坐标系原点。 54的椭球体长半轴半径是6378245米，80为6378140米，84和2000坐标系一样，都是6378137米。国家最新的2000坐标系和WGS84据说在厘米级都是一样的，但和80坐标在高纬度地区误差达十几倍。 7) Google、Microsoft、ArcGIS提供的地图服务分别采用了什么坐标系？ 现在都统一为了Web Mercator，即正轴墨卡托投影，和UTM（常规墨卡托）投影的主要区别是为了实现上的方便，把地球模拟为球体而非椭球体，精度理论上差别0.33%，比例尺大时基本可以忽略。同时纬度范围变成了(-85,85),南北极显示不了，但不影响正常使用，这样也减少了切图数量。 8）ArcGIS的空间参考与坐标系统？ ArcGIS的空间参考信息SpatialReference，不仅包含了坐标系统的定义，还包括容差Tolerance和分辨率Resolution等，通常由Prj文件表示。ArcGIS中的坐标系统分地理坐标系和投影坐标系，其中投影坐标系也一定包含一个地理坐标系，反之不然。]]></content>
      <categories>
        <category>无人机</category>
        <category>地图</category>
      </categories>
      <tags>
        <tag>GIS</tag>
        <tag>地图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[手机是如何实现自动对焦]]></title>
    <url>%2F2018%2F02%2F09%2F%E6%89%8B%E6%9C%BA%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%AF%B9%E7%84%A6%2F</url>
    <content type="text"><![CDATA[一、话不多说，我们首先来看看相机聚焦的原理是什么？然后再让它自动这个图我们都熟悉，中学时候的凸透镜成像的原理 要保证xx’=ff‘，这样才能得到清晰的像，可以发现物距x跟像距x’具有共轭关系，当物距x变化时，要么调节焦距f，要门调节像距x’，才能在相机上得到我们清晰的像 二、接着我们来了解下什么是景深？通俗来讲就是相机（底片）上，成清晰像的范围其实对于最简单的照相机（一块凸透镜）来说，唯一的一个物距仅对应一个像距，所以景深为0，偏离一点点都会不清晰。但是为什么我们的照相机拍出来的不光是一个面上是清晰的呢？因为我们的照相机跟人眼一样，它的景深可以做到趋近无限远（注意趋近）∞。两者的应用情况不同，对于工业定位而言，精度要达到微米级别，所以景深要做到尽可能小；对于我们民用的照相机而言，重点是景色，全景，拍一个面肯定就不行了啊下面三图是智能手机拍的照片：第一幅是在一定距离，我点击屏幕，让它对焦“杭州”，接着向上平移，没有再点击屏幕使其对焦，发现杭州俩字变模糊了，这时候的情况是焦距、像距均无变化，仅物距变化，显然就会造成模糊（但是不至于很模糊，还记的我们之前说的趋近于无限远的景深吗？如果无限远了，就一样清晰了，但是实际情况做不到，只能趋近），那我怎样让成像清晰呢？1、改变物距，所以图3我把一支笔上移了一段举例，可以看到笔身的字体还是蛮清晰的2、点击屏幕，重新聚焦，这时候改变的就是焦距跟像距了 三、那相机怎样像人一样判断，是否聚焦了呢？这里就用到了图像清晰度评价算法，常用的有这么几种： 频域分析法和统计学函数由于对抗噪声能力弱，算法复杂，应用较少，现有应用主要是上面的灰度梯度类算法及其改进算法具体的学术算法就不讲了，巴拉巴拉…得出结论是有那么几种算法，时间、准确性上都非常好 四、但是峰值位置怎么来求呢？一种是遍历法，就是每一点的图片清晰度值都计算出来，最后找到最大值，但这种算法未免太过浪费时间，效率低下，还有一种算法是爬山算法，基本原理是，先粗调，再精调，最终高效的找到图像清晰度最大的点（峰值）。找到后驱动电机运转一定角度，实现像距或者焦距的变化，步进到最佳成像位置五、差不多就是这么多，所以相机自动聚焦时，都会有个从模糊到清晰，到模糊，再到清晰的过程，这就是相机的自动调焦了 对之前的知识进行一定补充：介绍两个不同的概念 对焦：对我们的手机来说，对焦仅仅是实现物距跟像距的变化，达到共轭关系，使得成像清晰，而这是通过手机里面的音圈马达实现的，驱动整个镜头组移动来实现。限于手机体积的原因，只能达到这样的水平。 变焦：但是手机摄像头其实是多个棱镜片组成的，比如iPhone6 是由6片塑料棱镜组成的镜头模组，限于手机体积，我们没办法改变棱镜片之间的距离，所以我们改变不了手机的焦距。这也就是我们的手机只能做到数码变焦（其实就是把你拍的照片单纯放大而已，越大，成像会越不清晰），而光学变焦，目前来看，还没有谁成功在手机上运用 原贴地址：知乎]]></content>
      <categories>
        <category>无人机</category>
        <category>拍照</category>
      </categories>
      <tags>
        <tag>相机</tag>
        <tag>飞控</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[景深概念及计算]]></title>
    <url>%2F2018%2F02%2F04%2F%E7%B2%BE%E6%B7%B1%E6%A6%82%E5%BF%B5%E5%8F%8A%E8%AE%A1%E7%AE%97%2F</url>
    <content type="text"><![CDATA[先介绍几个概念：1、焦点(focus)与光轴平行的光线射入凸透镜时，理想的镜头应该是所有的光线聚集在一点后，再以锥状的扩散开来，这个聚集所有光线的一点，就叫做焦点。 2、弥散圆(circle of confusion)在焦点前后，光线开始聚集和扩散，点的影象变成模糊的，形成一个扩大的圆，这个圆就叫做弥散圆。 在现实当中，观赏拍摄的影象是以某种方式(比如投影、放大成照片等等)来观察的，人的肉眼所感受到的影象与放大倍率、投影距离及观看距离有很大的关系，如果弥散圆的直径小于人眼的鉴别能力，在一定范围内实际影象产生的模糊是不能辨认的。这个不能辨认的弥散圆就称为容许弥散圆(permissible circle of confusion)。 不同的厂家、不同的胶片面积都有不同的容许弥散圆直径的数值定义。一般常用的是： 画幅 24mm x 36mm 6cm x 9cm 4” x 5” 弥散圆直径 0.035mm 0.0817mm 0.146mm 35mm照相镜头的容许弥散圆，大约是底片对角线长度的1/1000~1/1500左右。前提是画面放大为5x7英寸的照片，观察距离为25~30cm。 3、景深(depth of field)在焦点前后各有一个容许弥散圆，这两个弥散圆之间的距离就叫景深，即：在被摄主体(对焦点)前后，其影像仍然有一段清晰范围的，就是景深。换言之，被摄体的前后纵深，呈现在底片面的影象模糊度，都在容许弥散圆的限定范围内。 景深随镜头的焦距、光圈值、拍摄距离而变化。对于固定焦距和拍摄距离，使用光圈越小，景深越大。 以持照相机拍摄者为基准，从焦点到近处容许弥散圆的的距离叫前景深，从焦点到远方容许弥散圆的距离叫后景深。 4、景深的计算下面是景深的计算公式。其中： δ — 容许弥散圆直径 f — 镜头焦距 F — 镜头的拍摄光圈值 L — 对焦距离 ΔL1 — 前景深 ΔL2 — 后景深 ΔL — 景深 $$前景深 ΔL1=\frac{FδL^2}{f^2 + FδL} 公式(1)$$$$后景深 ΔL2=\frac{FδL^2}{f^2 - FδL} 公式(2)$$$$景深 ΔL=ΔL1+ΔL2=\frac{2f^2FδL^2}{f^4 - F^2δ^2L^2}$$ 从公式(1)和(2)可以看出，后景深 &gt; 前景深。 由景深计算公式可以看出，景深与镜头使用光圈、镜头焦距、拍摄距离以及对像质的要求(表现为对容许弥散圆的大小)有关。这些主要因素对景深的影响如下(假定其他的条件都不改变)：(1)、镜头光圈：光圈越大，景深越小；光圈越小，景深越大；(2)、镜头焦距镜头焦距越长，景深越小；焦距越短，景深越大；(3)、拍摄距离距离越远，景深越大；距离越近，景深越小。 5、一些计算实例网上有些在线计算器，有兴趣的网友可以参考：摄影光学计算器Windows版本的可下载的计数器在f/Calc(1)、200/2.8对焦在5m时，f/2.8的景深： δ=0.035mmf=200mmF=2.8L=5000mmΔL1=60mmΔL2=62mmΔL=122mm结论： 该镜头在用f/2.8拍摄时，清晰范围是从4.94m~5.062m，景深很浅。 (2)、200/2.8+2X=400/5.6对焦在5m时，f/5.6的景深： δ=0.035mmf= 400mmF= 5.6L= 5000mmΔL1= 30mmΔL2= 31mmΔL= 61mm结论： 该镜头在配合2X增距镜后，主镜头用f/2.8拍摄时，景深是(1)的一半。 景深的实际拍摄照片 注：本内容是从其他博客得来，但是找不到原贴了]]></content>
      <categories>
        <category>无人机</category>
        <category>拍照</category>
      </categories>
      <tags>
        <tag>相机</tag>
        <tag>飞控</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初相遇]]></title>
    <url>%2F2018%2F01%2F28%2F%E5%B8%AD%E6%85%95%E8%93%89-%E5%88%9D%E7%9B%B8%E9%81%87%2F</url>
    <content type="text"><![CDATA[初相遇 美丽的梦和美丽的诗一样都是可遇而不可求的常常在最没能料到的时刻里出现 我喜欢那样的梦在梦里 一切都可以重新开始一切都可以慢慢解释心里甚至还能感觉到所有被浪费的时光竟然都能重回时的狂喜和感激 胸怀中满溢著幸福只因为你就在我眼前对我微笑 一如当年我真喜欢那样的梦 明明知道你已为我跋涉千里却又觉得芳草鲜美 落英缤纷好像你我才初初相遇]]></content>
      <categories>
        <category>书</category>
        <category>诗集</category>
      </categories>
      <tags>
        <tag>席慕蓉</tag>
      </tags>
  </entry>
</search>
